<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">
  
  <!-- @Reqired annotations -->
  <bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor" />
  
  <!-- Context Initializers -->
  <bean id="requestContextInitializer" class="org.vortikal.web.RequestContextInitializer"
    lazy-init="true">
    <description> This bean is required in order to initialize requests with the
      request context. The request context contains the service and the URI for
      each request. (See classes org.vortikal.web.RequestContext and
      org.vortikal.web.service.Service) </description>
    <property name="trustedToken" ref="trustedToken" />
    <property name="repository" ref="repository" />
    <property name="indexFileResolver" ref="indexFileResolver" />
    <property name="services" ref="services" />
    <property name="nonRepositoryRoots">
      <set>
        <value>${vrtx.staticResourcesBaseURL}</value>
      </set>
    </property>
    <property name="viewUnauthenticatedParameter" value="x-prevent-decorating"/>
  </bean>
  
  <bean id="services" class="org.vortikal.beans.factory.BeansListingFactoryBean">
    <property name="targetBeansClass" value="org.vortikal.web.service.Service" />
  </bean>
  
  <bean id="indexFileResolver" class="org.vortikal.web.IndexFileResolver">
    <property name="indexFilePropDef" ref="collection.indexFilePropDef" />
  </bean>
  
  <bean id="securityInitializer" class="org.vortikal.security.web.SecurityInitializer">
    <description> This bean initializes the security context for each request.
      The security context contains the authenticated principal and the
      repository token. </description>
    <property name="tokenManager" ref="tokenManager" />
    <property name="principalManager" ref="principalManager" />
    <property name="principalFactory" ref="principalFactory" />
    <property name="cookieLinkStore" ref="cookieLinkStore" />
    <property name="cookieLinksEnabled" value="${security.sessionCookieLinksEnabled}" />
    <property name="rememberAuthMethod" value="${security.rememberAuthMethod}" />
    <property name="spCookieDomain" value="${security.spCookieDomain}" />
    <property name="spCookieAssertion" ref="securityInitializer.spCookieAssertion" />
   </bean>

  <bean id="securityInitializer.spCookieAssertion" class="org.vortikal.web.service.AndAssertion">
    <property name="assertions">
      <list>
        <bean class="org.vortikal.web.service.InvertAssertion">
          <property name="assertion">
            <ref bean="webdavHostNameAssertion" />
          </property>
        </bean>
        <bean class="org.vortikal.web.service.InvertAssertion">
          <property name="assertion">
            <bean class="org.vortikal.web.service.ConfigAssertion">
              <property name="config" value="${webdavHostName}" />
              <property name="expectedValue" value="${webHostName}" />
            </bean>
          </property>
        </bean>
      </list>
    </property>
  </bean>

  <bean id="cookieLinkStore" class="org.vortikal.security.CookieLinkStore">
    <property name="cache" ref="cookieLinkStore.cache" />
  </bean>
  <bean id="cookieLinkStore.cache" class="org.vortikal.util.cache.SimpleCacheImpl">
    <property name="timeoutSeconds" value="3600" />
  </bean>
  
  <bean id="defaultRequestFilters" class="org.vortikal.context.CategoryResolvingFactoryBean">
    <property name="clazz" value="org.vortikal.web.filter.RequestFilter" />
    <property name="category" value="defaultServletRequestFilter" />
  </bean>
  
  <bean id="defaultRequestFilterCategoryBean" abstract="true">
    <property name="order" value="0" />
    <property name="categories">
      <set>
        <value>defaultServletRequestFilter</value>
      </set>
    </property>
  </bean>
  
  <bean id="defaultResponseFilters" class="org.vortikal.context.CategoryResolvingFactoryBean">
    <property name="clazz" value="org.vortikal.web.filter.ResponseFilter" />
    <property name="category" value="defaultServletResponseFilter" />
  </bean>
  
  <bean id="defaultResponseFilterCategoryBean" abstract="true">
    <property name="order" value="0" />
    <property name="categories">
      <set>
        <value>defaultServletResponseFilter</value>
      </set>
    </property>
  </bean>
  
  <bean id="repositoryContextInitializer" class="org.vortikal.web.RepositoryContextInitializer" />

  <!-- HandlerMapping -->
  <bean id="serviceMapping" class="org.vortikal.web.service.ServiceHandlerMapping">
    <description> The service handler mapping must be set in order for the
      service framework to function. </description>
  </bean>

  <!-- Custom and required Spring HandlerAdapter instances defined here. -->
  <!-- Note that defining even a single instance of a custom HandlerAdapter in will cause
       Spring to disregard its default set of handler adapters, and thus all required
       handler-adapters must be defined here. The Spring (2.5.x) default adapters are:
        - org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter
        - org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter
        - org.springframework.web.servlet.mvc.throwaway.ThrowawayControllerHandlerAdapter
        - org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter

       Source: org/springframework/web/servlet/DispatcherServlet.properties -->

  <!-- Custom handlerAdapter for all Controller instances: -->
  <bean class="org.vortikal.web.filter.ServiceHandlerFilterAdapter" />

  <!-- Spring HandlerAdapter for all HttpRequestHandler instances: -->
  <bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter" />
  
  <bean id="canonicalUrlService" class="org.vortikal.util.net.ResourceUrlServiceImpl">
    <property name="webHostName" value="${webHostName}" />
    <property name="webProtocol" value="${webProtocol}" />
    <property name="webProtocolRestricted" value="${webProtocolRestricted}" />
    <property name="webPort" value="${canonicalUrlService.webPort}" />
  </bean>
  
</beans>
