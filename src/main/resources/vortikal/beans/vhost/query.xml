<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>

  <bean id="queryParserFactory"
        class="org.vortikal.repository.search.QueryParserFactoryImpl">
    <property name="resourceTypeTree" ref="resourceTypeTree" />
  </bean>

  <bean id="SORT_ORDER.ASC" class="org.vortikal.repository.search.SortFieldDirection"
        factory-method="valueOf">
    <constructor-arg value="ASC" />
  </bean>

  <bean id="SORT_ORDER.DESC" class="org.vortikal.repository.search.SortFieldDirection"
        factory-method="valueOf">
    <constructor-arg value="DESC" />
  </bean>

  <bean id="searchParser" class="org.vortikal.repository.search.ParserImpl">
    <property name="parserFactory" ref="queryParserFactory" />
    <property name="queryStringPreProcessor" ref="queryStringPreProcessor" />
    <property name="resourceTypeTree" ref="resourceTypeTree" />
  </bean>

  <bean id="queryStringPreProcessor"
        class="org.vortikal.repository.search.preprocessor.QueryStringPreProcessorImpl">
    <property name="expressionEvaluators">
      <list>
        <bean class="org.vortikal.repository.search.preprocessor.CurrentDepthExpressionEvaluator" />

        <!-- Wrap CurrentFolderExpressionEvaluator to get escaped output -->
        <bean class="org.vortikal.repository.search.preprocessor.OutputEscapingExpressionEvaluatorWrapper">
          <property name="wrappedEvaluator">
            <bean class="org.vortikal.repository.search.preprocessor.CurrentFolderExpressionEvaluator"
              parent="requestLocalRepositoryAware" />
          </property>
        </bean>
        
        <!-- TODO: Wrap FeaturedArticlesExpressionEvaluator, like CurrentFolderExpressionEvaluator??? -->
        <bean class="org.vortikal.repository.search.preprocessor.FeaturedArticlesExpressionEvaluator"
              parent="requestLocalRepositoryAware" />

        <bean class="org.vortikal.repository.search.preprocessor.CurrentTimeExpressionEvaluator" />
        <bean class="org.vortikal.repository.search.preprocessor.CurrentDateExpressionEvaluator">
           <property name="variableName" value="currentDate" />
        </bean>
      </list>
    </property>
  </bean>

  <!-- Document mapper -->
  <bean id="documentMapper" class="org.vortikal.repository.index.mapping.DocumentMapperImpl">
    <property name="resourceTypeTree" ref="resourceTypeTree"/>
    <!--property name="contextManager" ref="contextManager" /-->
    <property name="fieldValueMapper" ref="fieldValueMapper"/>
  </bean>

  <!-- Index field value mapper -->  
  <bean id="fieldValueMapper" class="org.vortikal.repository.index.mapping.FieldValueMapperImpl">
    <property name="valueFactory" ref="valueFactory"/>
  </bean>

  <!-- Primary Lucene index accessor instance. Manages low-level access. -->
  <bean id="systemIndexAccessor" class="org.vortikal.repository.index.LuceneIndexManager">
    <property name="storageRootPath" value="${indexStorageRootPath}"/>
    <property name="storageId" value="property_index"/>
    <property name="forceUnlock" value="true"/>
    <property name="maxLockAcquireTimeOnShutdown" value="30"/>
  </bean>

  <!-- Property set index based on primary Lucene index accessor instance.  -->
  <bean id="systemIndex" class="org.vortikal.repository.index.PropertySetIndexImpl">
    <property name="indexAccessor" ref="systemIndexAccessor"/>
    <property name="documentMapper" ref="documentMapper"/>
  </bean>

  <!-- A Lucene index accessor (secondary instance, batch indexing tuned) -->
  <bean id="secondarySystemIndexAccessor" class="org.vortikal.repository.index.LuceneIndexManager">
    <property name="storageRootPath" value="${indexStorageRootPath}"/>
    <property name="storageId" value="property_index.secondary"/>
    <property name="maxBufferedDocs" value="100"/>
    <property name="mergeFactor" value="100"/>
    <property name="maxMergeDocs" value="15000"/>
    <property name="forceUnlock" value="true"/>
    <property name="maxLockAcquireTimeOnShutdown" value="30"/>
    <property name="closeAfterInitialization" value="true"/>
  </bean>

  <!-- Secondary property set index instance -->
  <bean id="secondarySystemIndex" class="org.vortikal.repository.index.PropertySetIndexImpl">
    <property name="indexAccessor" ref="secondarySystemIndexAccessor"/>
    <property name="documentMapper" ref="documentMapper"/>
  </bean>
  
  <!-- Factory for building Lucene queries. -->
  <bean id="queryBuilderFactory"
        class="org.vortikal.repository.search.query.QueryBuilderFactoryImpl">
    <property name="resourceTypeTree" ref="resourceTypeTree"/>
    <property name="indexAccessor" ref="systemIndexAccessor"/>
    <property name="fieldValueMapper" ref="fieldValueMapper"/>
  </bean>

  <!-- Searcher implementation -->
  <bean id="systemIndexSearcher"
        class="org.vortikal.repository.search.SearcherImpl">
    <property name="indexAccessor" ref="systemIndexAccessor"/>
    <property name="documentMapper" ref="documentMapper"/>
    <property name="queryBuilderFactory" ref="queryBuilderFactory"/>
    <property name="queryResultAuthorizationManager" ref="queryResultAuthorizationManager"/>
    <property name="fieldValueMapper" ref="fieldValueMapper"/>
  </bean>

  <!-- Query result authorization (ACL checking) -->
  <bean id="queryResultAuthorizationManager"
        class="org.vortikal.repository.search.query.security.DatabaseQueryResultAuthorizationManager">
    <property name="principalManager" ref="principalManager"/>
    <property name="tokenManager" ref="tokenManager"/>
    <property name="roleManager" ref="roleManager"/>
    <property name="indexDao" ref="repository.indexDao"/>

    <!-- A set of principals can be excluded from database 
         result authorization check. -->
    <!--property name="noAuthorizationCheckForPrincipals">
      <set>
        <value>root@localhost</value>
      </set>
    </property-->
  </bean>

  <!-- Perform incremental updates on property set index from resource changes. -->
  <bean id="systemIndexUpdater" 
       class="org.vortikal.repository.index.observation.PropertySetIndexUpdater">
    <property name="index" ref="systemIndex"/>
    <property name="notifier" ref="repository.resourceChangeNotifier"/>
    <property name="indexDao" ref="repository.indexDao"/>
  </bean>
  

  <!-- Uhtml Context -->
  <!--bean id="repository.contextDAO" class="org.vortikal.repository.store.db.SqlMapContextDAO">
    <property name="sqlMapClient" ref="repository.sqlMapClient"/>
    <property name="sqlMaps" ref="repository.statementMappings" />
  </bean>

  <bean id="contextManager" class="org.vortikal.repository.domain.ContextManagerImpl">
    <property name="notifier" ref="repository.resourceChangeNotifier"/>
    <property name="contextDAO" ref="repository.contextDAO" />
    <property name="contextPropertyDefinitions">
      <list>
        <ref bean="unitPropDef" />
        <ref bean="topicPropDef" />
        <ref bean="editorNamePropDef" />
        <ref bean="editorEmailPropDef" />
        <ref bean="editorURLPropDef" />
      </list>
    </property>
    <property name="enabledProp" ref="visualProfileEnabledPropdef" />
    <property name="definesContextProp" ref="visualProfileCustomDefinedPropdef" />
  </bean-->

</beans>
