<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

  <bean id="queryParserFactory"
        class="org.vortikal.repository.search.QueryParserFactoryImpl">
    <property name="resourceTypeTree" ref="resourceTypeTree" />
  </bean>

  <bean id="SORT_ORDER.ASC" class="org.vortikal.repository.search.SortFieldDirection"
        factory-method="valueOf">
    <constructor-arg value="ASC" />
  </bean>

  <bean id="SORT_ORDER.DESC" class="org.vortikal.repository.search.SortFieldDirection"
        factory-method="valueOf">
    <constructor-arg value="DESC" />
  </bean>

  <bean id="searchParser" class="org.vortikal.repository.search.ParserImpl">
    <property name="parserFactory" ref="queryParserFactory" />
    <property name="queryStringPreProcessor" ref="queryStringPreProcessor" />
    <property name="resourceTypeTree" ref="resourceTypeTree" />
  </bean>

  <bean id="queryStringPreProcessor"
        class="org.vortikal.repository.search.preprocessor.QueryStringPreProcessorImpl">
    <property name="expressionEvaluators">
      <list>
        <bean class="org.vortikal.repository.search.preprocessor.CurrentDepthExpressionEvaluator" />

        <!-- Wrap CurrentFolderExpressionEvaluator to get escaped output -->
        <bean class="org.vortikal.repository.search.preprocessor.OutputEscapingExpressionEvaluatorWrapper">
          <property name="wrappedEvaluator">
            <bean class="org.vortikal.repository.search.preprocessor.CurrentFolderExpressionEvaluator" />
          </property>
        </bean>        

        <bean class="org.vortikal.repository.search.preprocessor.CurrentTimeExpressionEvaluator" />
        
        <bean class="org.vortikal.repository.search.preprocessor.CurrentDateExpressionEvaluator">
           <property name="variableName" value="currentDate" />
        </bean>
      </list>
    </property>
  </bean>

  <!-- Document mapper -->
  <bean id="documentMapper" class="org.vortikal.repository.index.mapping.DocumentMapper"
        depends-on="structuredResource.parser">
    <!-- 
         XXX: This bean depends the structured resource parser being
         initialized (because it modifies the resource type tree)
     -->
    <property name="resourceTypeTree" ref="resourceTypeTree"/>
    <property name="fieldValueMapper" ref="fieldValueMapper"/>
  </bean>

  <!-- Index field value mapper -->  
  <bean id="fieldValueMapper" class="org.vortikal.repository.index.mapping.Field4ValueMapper">
    <property name="valueFactory" ref="valueFactory"/>
    <property name="locale" value="${view.defaultLocale}" />
  </bean>
  
  <bean id="searcherFactory" class="org.vortikal.repository.index.WarmupSearcherFactory">
    <property name="hiddenPropDef" ref="hiddenPropDef" />
    <property name="lastModifiedPropDef" ref="lastModifiedPropDef" />
    <property name="luceneQueryBuilder" ref="queryBuilder" />
  </bean>

  <!-- Primary Lucene index accessor instance. Manages low-level access. -->
  <bean id="systemIndexAccessor" class="org.vortikal.repository.index.Lucene4IndexManager">
    <property name="storageRootPath" value="${indexStorageRootPath}"/>
    <property name="storageId" value="property_index"/>
    <property name="forceUnlock" value="true"/>
    <property name="maxLockAcquireTimeOnShutdown" value="20"/>
<!--    <property name="maxReadOnlyReaders" value="${indexMaxReadOnlyReaders}" />
    <property name="maxAgingReadOnlyReaders" value="${indexMaxAgingReadOnlyReaders}" />
    <property name="agingReadOnlyReaderThreshold" value="${indexAgingReadOnlyReaderThreshold}" />-->
    <property name="searcherFactory" ref="searcherFactory" />
  </bean>

  <!-- Property set index based on primary Lucene index accessor instance.  -->
  <bean id="systemIndex" class="org.vortikal.repository.index.PropertySetIndexImpl">
    <property name="indexAccessor" ref="systemIndexAccessor"/>
    <property name="documentMapper" ref="documentMapper"/>
  </bean>

  <!-- A Lucene index accessor (secondary instance, batch indexing tuned) -->
  <bean id="secondarySystemIndexAccessor" class="org.vortikal.repository.index.Lucene4IndexManager">
    <property name="storageRootPath" value="${indexStorageRootPath}"/>
    <property name="storageId" value="property_index.secondary"/>
    <property name="batchIndexingMode" value="true"/>
    <property name="forceUnlock" value="true"/>
    <property name="maxLockAcquireTimeOnShutdown" value="20"/>
    <property name="closeAfterInit" value="true"/>
  </bean>

  <!-- Secondary property set index instance -->
  <bean id="secondarySystemIndex" class="org.vortikal.repository.index.PropertySetIndexImpl">
    <property name="indexAccessor" ref="secondarySystemIndexAccessor"/>
    <property name="documentMapper" ref="documentMapper"/>
  </bean>
  
  <!-- Factory for building Lucene queries. -->
  <bean id="queryBuilder"
        class="org.vortikal.repository.search.query.LuceneQueryBuilderImpl">
    <property name="resourceTypeTree" ref="resourceTypeTree"/>
    <property name="fieldValueMapper" ref="fieldValueMapper"/>
    <property name="queryAuthorizationFilterFactory" ref="queryAuthorizationFilterFactory"/>
    <property name="publishedPropDef" ref="publishedPropDef" />
    <property name="unpublishedCollectionPropDef" ref="unpublishedCollectionPropDef" />
  </bean>

  <!-- Searcher implementation (wrapped in throttler)-->
  <bean id="systemIndexSearcher"
        class="org.vortikal.repository.search.ThrottlingSearcherWrapper">
    <property name="maxConcurrentQueries" value="${indexMaxConcurrentQueries}" />
    <property name="searcher">
      <bean class="org.vortikal.repository.search.SearcherImpl">
        <property name="indexAccessor" ref="systemIndexAccessor"/>
        <property name="documentMapper" ref="documentMapper"/>
        <property name="queryBuilder" ref="queryBuilder"/>
        <property name="unauthenticatedQueryMaxDirtyAge" value="${indexUnauthenticatedQueryMaxDirtyAge}" />
      </bean>
    </property>
  </bean>
  
  <bean id="queryAuthorizationFilterFactory"
        class="org.vortikal.repository.search.query.security.CachingQueryAuthorizationFilterFactory">
    <property name="principalManager" ref="principalManager"/>
    <property name="tokenManager" ref="tokenManager"/>
    <property name="roleManager" ref="roleManager"/>
  </bean>

  <!-- Set up incremental index updates from repository changes -->
  <!-- Event database dumper for new system index (logger id = 1 and logger type = 3)  -->
  <bean id="repository.index.eventDumper" 
    class="org.vortikal.repository.ProcessedContentEventDumperAll">
    <property name="changeLogDAO" ref="repository.changeLogDAO"/>
    <property name="repository" ref="repository"/>
    <property name="loggerId" value="1" />
    <property name="loggerType" value="3" />
  </bean>

  <!-- Perform incremental updates on property set index from resource changes. -->
  <bean id="repository.index.incrementalUpdater" 
       class="org.vortikal.repository.index.update.IncrementalUpdater">
    <property name="index" ref="systemIndex"/>
    <property name="indexDao" ref="repository.indexDao"/>
    <property name="changeLogDAO" ref="repository.changeLogDAO"/>
    <property name="loggerId" value="1"/>
    <property name="loggerType" value="3" />
  </bean>
  <!-- Background thread for triggering incremental updates -->
  <bean id="repository.index.updateTrigger"
        class="org.vortikal.scheduling.SimpleMethodInvokingTriggerBean">
    <property name="targetMethodName" value="update"/>
    <property name="targetObject" ref="repository.index.incrementalUpdater"/>
    <property name="triggerThreadName" value="${repositoryID}.indexupdater"/>
    <property name="startDelay" value="20000"/>
    <property name="repeatInterval" value="${repository.indexUpdater.interval}"/>
    <property name="startTriggerAfterInitialization" value="true"/>
    <property name="abortTriggerOnTargetMethodException" value="false"/>
  </bean>

</beans>
