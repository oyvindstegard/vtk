<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p" 
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util
                           http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd" xmlns:aop="http://www.springframework.org/schema/aop">

  <!-- Resource type definition for 'videoref' type. -->  
  <bean id="mediaref.videorefType"
        class="org.vortikal.repository.resourcetype.PrimaryResourceTypeDefinitionImpl">
    <property name="name" value="videoref"/>
    <property name="namespace" ref="DEFAULT_NAMESPACE" />
    <property name="parentTypeDefinition" ref="videoResourceTypeDefinition" />
    <property name="assertions">
      <list>
        <bean class="org.vortikal.resourcemanagement.JSONObjectSelectAssertion">
          <property name="expression" value="resourcetype" />
          <property name="expectedValue" value="videoref" />
        </bean>
      </list>
    </property>
    <property name="propertyTypeDefinitions">
      <list>
        <ref bean="videoref.videoIdPropDef" />
        <ref bean="videoref.videoStatusPropDef" />
        <ref bean="videoref.streamablePercentCompletePropDef" />
        <!-- TODO add overriding contentType propdef with evaluator which looks in
        videoref (if available), falls back to standard evaluator otherwise. -->
      </list>
    </property>
  </bean>

  <!-- videoId property of resource type videoref -->
  <bean id="videoref.videoIdPropDef" class="org.vortikal.repository.resourcetype.PropertyTypeDefinitionImpl" parent="abstractPropDef">
    <property name="name" value="videoId" />
    <property name="namespace" ref="DEFAULT_NAMESPACE" />
    <property name="type" value="STRING" />
    <property name="propertyEvaluator">
      <bean class="org.vortikal.repository.resourcetype.property.JsonExtractEvaluator">
        <property name="valueFactory" ref="valueFactory" />
        <property name="expression" value="ref.videoId" />
        <property name="alwaysEvaluate" value="true" />
      </bean>
    </property>
  </bean>
        
  <!-- videoStatus property of resource type videoref -->
  <bean id="videoref.videoStatusPropDef" class="org.vortikal.repository.resourcetype.PropertyTypeDefinitionImpl" parent="abstractPropDef">
    <property name="name" value="videoStatus" />
    <property name="namespace" ref="DEFAULT_NAMESPACE" />
    <property name="type" value="STRING" />
    <property name="propertyEvaluator">
      <bean class="org.vortikal.repository.resourcetype.property.JsonExtractEvaluator">
        <property name="valueFactory" ref="valueFactory" />
        <property name="expression" value="ref.status" />
        <property name="alwaysEvaluate" value="true" />
      </bean>
    </property>
  </bean>
  
  <!-- videoStreamablePercentComplete property of resource type videoref -->
  <bean id="videoref.streamablePercentCompletePropDef" class="org.vortikal.repository.resourcetype.PropertyTypeDefinitionImpl" parent="abstractPropDef">
    <property name="name" value="videoStreamablePercentComplete" />
    <property name="namespace" ref="DEFAULT_NAMESPACE" />
    <property name="type" value="INT" />
    <property name="propertyEvaluator">
      <bean class="org.vortikal.repository.resourcetype.property.JsonExtractEvaluator">
        <property name="valueFactory" ref="valueFactory" />
        <property name="expression" value="ref.streamablePercentComplete" />
        <property name="alwaysEvaluate" value="true" />
      </bean>
    </property>
  </bean>
  
  <!-- Repository integration -->
  <bean id="videoref.videoContentHooks" parent="abstractTypeHandlerHooks"
        class="org.vortikal.videoref.VideoContentHooks">
    <property name="videoStorageRoot" value="${mediaref.videoapp.videoStorageRootPath}" />
    <property name="videoApiClient" ref="videoref.videoapp.client" />
    <property name="repositoryId" value="${repositoryID}" />
    
    <!-- Media-mixin prop defs -->
    <property name="thumbnailPropDef" ref="thumbnailPropDef" />
    <property name="mediaDurationPropDef" ref="mediaDurationPropDef" />
    <property name="mediaHeightPropDef" ref="mediaHeightPropDef" />
    <property name="mediaWidthPropDef" ref="mediaWidthPropDef" />
    <property name="mediaMetadataStatusPropDef" ref="mediaMetadataStatusPropDef" />
  </bean>

  <!-- Videoapp client -->
  <bean id="videoref.videoapp.client" class="org.vortikal.videoref.VideoappClient">
    <property name="restTemplate">
      <bean class="org.springframework.web.client.RestTemplate" >
        <constructor-arg>
          <bean class="org.vortikal.util.web.BasicAuthHttpRequestFactory">
            <property name="username" value="${mediaref.videoapp.username}" />
            <property name="password" value="${mediaref.videoapp.password}" />
            <property name="connectTimeout" value="2000" />
            <property name="readTimeout" value="60000" />
          </bean>
        </constructor-arg>
        <property name="messageConverters">
          <list>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter" />
            <bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
            <bean class="org.vortikal.util.web.JSONHttpMessageConverter" />
          </list>
        </property>
      </bean>
    </property>
    <property name="repositoryId" value="${repositoryID}" />
    <property name="apiBaseUrl" value="${mediaref.videoapp.apiBaseUrl}" />
  </bean>
  
  <!-- Video DAO support -->
  <bean id="videoref.daoSupport" class="org.vortikal.videoref.VideoDaoSupport">
    <property name="dataSource" ref="repository.dataSource" />
    <property name="videoIdProperty" ref="videoref.videoIdPropDef" />
  </bean>
  
  <!-- System job for storing videoref resources with media-metadata-status = 'GENERATE'. 
       This job is present as a fallback in case some video update notifications from
       videoapp could not be processed for various reasons. We cannot in general
       rely on proper reception and processing of all video update notification
       messages. This job will make sure that videos in a non-final metadata-state will be refreshed
       from videoapp.
  -->
  <bean id="videoref.periodicRefreshTask" class="org.vortikal.repository.systemjob.StoreResourceJob"
        parent="repository.systemjob" depends-on="resourceTypeTree">
    <property name="triggerExpression" value="60" />
    <property name="id" value="videoref-periodic-refresh" />
    <property name="pathSelector">
      <bean class="org.vortikal.repository.systemjob.IndexQueryPathSelector" parent="repository.systemjob.indexPathSelector">
        <property name="limit" value="20" />
        <property name="queryString">
          <value>
            type IN videoref AND media-metadata-status = GENERATE
          </value>
        </property>
      </bean>
    </property>
    <property name="affectedPropDefPointers">
      <list>
        <value>videoStatus</value>
        <value>duration</value>
        <value>thumbnail</value>
        <value>pixelHeight</value>
        <value>pixelWidth</value>
        <value>media-metadata-status</value>
      </list>
    </property>
  </bean>
  
  <!-- Abstract service for external streaming of videoref resources. -->
  <bean id="videoref.streamService" class="org.vortikal.web.service.ServiceImpl">
    <property name="parent" ref="viewService" />
    <property name="order" value="-1" />
    <property name="assertions">
      <list>
        <bean class="org.vortikal.web.service.RequestParameterAssertion">
          <property name="parameterName" value="vrtx" />
          <property name="parameterValue" value="stream" />
        </bean>
        <bean class="org.vortikal.web.service.ResourceTypeAssertion">
          <property name="repository" ref="repository" />
          <property name="resourceTypeDefinition" ref="mediaref.videorefType" />
        </bean>
        <bean class="org.vortikal.videoref.StreamableAssertion" />
      </list>
    </property>
  </bean>
  
  <!-- Service streaming videoref resources using Adobe HTTP Dynamic Streaming -->
  <bean id="videoref.hdsStreamService" class="org.vortikal.web.service.ServiceImpl">
    <property name="parent" ref="videoref.streamService" />
    <property name="assertions">
      <list>
        <bean class="org.vortikal.web.service.RequestParameterAssertion">
          <property name="parameterName" value="type" />
          <property name="parameterValue" value="hds" />
        </bean>
      </list>
    </property>
    <property name="handler">
      <bean class="org.vortikal.videoref.StreamingRedirect">
        <property name="videoappClient" ref="videoref.videoapp.client" />
        <property name="streamType" value="ADOBE_HDS" />
        <property name="videoIdPropDef" ref="videoref.videoIdPropDef" />
      </bean>
    </property>
    <property name="attributes">
      <map>
        <entry key="remove-caching" value="true" />
      </map>
    </property>
  </bean>
  
  <!-- Service streaming videoref resources using Apple HTTP Live Streaming -->
  <bean id="videoref.hlsStreamService" class="org.vortikal.web.service.ServiceImpl">
    <property name="parent" ref="videoref.streamService" />
    <property name="assertions">
      <list>
        <bean class="org.vortikal.web.service.RequestParameterAssertion">
          <property name="parameterName" value="type" />
          <property name="parameterValue" value="hls" />
        </bean>
      </list>
    </property>
    <property name="handler">
      <bean class="org.vortikal.videoref.StreamingRedirect">
        <property name="videoappClient" ref="videoref.videoapp.client" />
        <property name="streamType" value="APPLE_HLS" />
        <property name="videoIdPropDef" ref="videoref.videoIdPropDef" />
      </bean>
    </property>
    <property name="attributes">
      <map>
        <entry key="remove-caching" value="true" />
      </map>
    </property>
  </bean>
  
  <!-- Reference data providers for streaming URLs -->
  <bean id="videoref.hdsStreamUrlProvider" class="org.vortikal.web.referencedata.provider.ResourceServiceURLProvider">
    <property name="modelName" value="streamingUrls" />
    <property name="urlName" value="hdsStreamUrl" />
    <property name="service" ref="videoref.hdsStreamService" />
    <property name="matchAssertions" value="true" />
  </bean>
  <bean id="videoref.hlsStreamUrlProvider" class="org.vortikal.web.referencedata.provider.ResourceServiceURLProvider">
    <property name="modelName" value="streamingUrls" />
    <property name="urlName" value="hlsStreamUrl" />
    <property name="service" ref="videoref.hlsStreamService" />
    <property name="matchAssertions" value="true" />
  </bean>
  <!-- Provider for direct streaming URLs -->
  <bean id="videoref.directStreamingUrlsProvider" class="org.vortikal.videoref.StreamingDirectUrlProvider">
    <property name="videoIdPropDef" ref="videoref.videoIdPropDef" />
    <property name="videoStatusPropDef" ref="videoref.videoStatusPropDef" />
    <property name="videoappClient" ref="videoref.videoapp.client" />
  </bean>
  
  <!-- Service for videoapp support/callback API -->
  <bean id="videoref.supportApiService" class="org.vortikal.web.service.ServiceImpl">
    <property name="parent" ref="viewService" />
    <property name="order" value="-1" />
    <property name="assertions">
      <list>
        <bean class="org.vortikal.web.service.RequestURIRegexpAssertion">
          <property name="pattern" value="^${appResources.baseURL}/videoref/callback/rest/v0.*"/>
        </bean>
        <!--        <bean class="org.vortikal.web.service.RequestProtocolAssertion">
          <property name="protocol" value="${webProtocolRestricted}"/>
        </bean>
        <bean class="org.vortikal.web.service.IsAuthenticatedAssertion">
          <property name="requiresAuthentication" value="true"/>
        </bean>-->
        <!--        <bean class="org.vortikal.web.service.PrincipalMatchAssertion">
          <property name="principalManager" ref="principalManager" />
          <property name="principals">
            <set>
              <value>videoapp@localhost</value>
            </set>
          </property>
        </bean>-->
      </list>
    </property>
    <property name="handler">
      <bean class="org.vortikal.videoref.VideoappCallbackService" >
        <property name="apiBaseUri" value="${appResources.baseURL}/videoref/callback/rest/v0" />
        <property name="videoDaoSupport" ref="videoref.daoSupport" />
        <property name="repositoryId" value="${repositoryID}" />
        <property name="videoUpdateTask" ref="videoref.updateNotifyHandlerTask" />
        <property name="view">
          <bean class="org.vortikal.web.view.JsonView">
            <property name="modelKey" value="json" />
            <property name="indentFactor" value="2" />
            <property name="httpStatusKey" value="status" />
          </bean>
        </property>
      </bean>
    </property>
  </bean>
  
  
  <!-- This job queues video update notification events and processes them
  asynchronously. -->
  <bean id="videoref.updateNotifyHandlerTask" class="org.vortikal.videoref.VideoUpdateTask"
          parent="repository.systemjob" depends-on="resourceTypeTree">
    <property name="triggerExpression" value="2" />
    <property name="id" value="videoref-update-event-handler" />
    <property name="affectedPropDefPointers">
      <list>
        <value>videoStatus</value>
        <value>duration</value>
        <value>thumbnail</value>
        <value>pixelHeight</value>
        <value>pixelWidth</value>
        <value>media-metadata-status</value>
      </list>
    </property>
    <property name="videoDaoSupport" ref="videoref.daoSupport" />
  </bean>

</beans>
