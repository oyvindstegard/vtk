<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>

  <bean id="articleListing.viewService" class="org.vortikal.web.service.ServiceImpl">
    <property name="parent" ref="collectionListing.viewService" />
    <property name="order" value="0" />
    <property name="assertions">
      <list>
        <ref bean="resourceIsArticleListing" />
      </list>
    </property>
    <property name="handlerInterceptors">
      <list>
        <ref bean="noCacheViewHandlerInterceptor" />
      </list>
    </property>
    <property name="handler" ref="articleListing.handler" />
    <property name="serviceNameProvider" ref="collectionListing.viewService.serviceNameProvider" />
  </bean>

  <bean id="articleListing.atomService" class="org.vortikal.web.service.ServiceImpl">
    <property name="parent" ref="collectionListing.atomService" />
    <property name="order" value="-2" />
    <property name="assertions">
      <list>
        <ref bean="resourceIsArticleListing" />
      </list>
    </property>
    <property name="handler" ref="articleListing.atomHandler" />
  </bean>

  <bean id="articleListing.handler" class="org.vortikal.web.display.collection.ArticleListingController"
    parent="repositoryAware">
    <property name="resourceManager" ref="resourceManager" />
    <property name="sortPropDefs">
      <list>
        <ref bean="importancePropDef" />
        <ref bean="navigationTitlePropDef" />
        <ref bean="titlePropDef" />
      </list>
    </property>
    <property name="overridingSortPropDefs">
      <map>
        <entry key-ref="navigationTitlePropDef">
          <list>
            <ref bean="titlePropDef" />
          </list>
        </entry>
      </map>
    </property>
    <property name="hiddenPropDef" ref="hiddenPropDef" />
    <property name="pageLimitPropDef" ref="pageLimitPropDef" />
    <property name="hideNumberOfComments" ref="hideNumberOfCommentsPropDef" />
    <property name="defaultPageLimit" value="${collectionListing.defaultPageLimit}" />
    <property name="viewName" value="${override.listing.prefix}articleListing.view" />
    <property name="searcher" ref="articleListingSearcher" />
    <property name="alternativeRepresentations">
      <map>
        <entry key="application/atom+xml" value-ref="articleListing.atomService" />
      </map>
    </property>
  </bean>

  <bean id="articleListing.atomHandler" class="org.vortikal.web.display.collection.ArticleListingAsFeedController"
    parent="repositoryAware">
    <property name="viewService" ref="viewService" />
    <property name="abdera" ref="abdera" />
    <property name="searcher" ref="articleListingSearcher" />
    <property name="publishedDatePropDef" ref="publishedDatePropDef" />
    <property name="authorPropDef" ref="authorsPropDef" />
  </bean>

  <bean id="articleListingSearcher" class="org.vortikal.web.display.article.ArticleListingSearcher">
    <property name="defaultSearch" ref="${override.listing.prefix}articleListing.searchComponent" />
    <property name="featuredArticlesSearch" ref="${override.listing.prefix}articleListing.featuredArticlesSearchComponent" />
    <property name="subfoldersSearch" ref="${override.listing.prefix}articleListing.subfoldersSearchComponent" />
    <property name="recursiveListingPropDef" ref="articleListing.recursiveListingPropDef" />
    <property name="subfolderPropDef" ref="articleListing.recursiveListingSubfoldersPropDef" />
    <property name="featuredArticlesPropDef" ref="articleListing.featuredArticlesPropDef" />
  </bean>

  <bean id="articleListing.searchComponent" class="org.vortikal.web.search.QueryStringSearchComponent"
    parent="repositoryAware" depends-on="resourceTypeTree">
    <property name="name" value="articleListing.defaultArticles" />
    <property name="viewService" ref="webService" />
    <property name="resourceManager" ref="resourceManager" />
    <property name="defaultRecursive" value="true" />
    <property name="recursivePropDef" ref="articleListing.recursiveListingPropDef" />
    <property name="sortPropDef" ref="articleListing.sortingPropDef" />
    <property name="query">
      <value>(uri = {$currentFolder}/* AND uri NOT IN {$featuredArticles}) AND (type IN article AND published-date &lt;= {$currentTime})</value>
    </property>
    <property name="queryParser" ref="searchParser" />
    <property name="sortOrderPropDefPointers">
      <list>
        <value>published-date</value>
      </list>
    </property>
    <property name="resourceTypeTree" ref="resourceTypeTree" />
    <property name="defaultSortOrder" ref="SORT_ORDER.DESC" />
    <property name="sortOrderMapping">
      <map>
        <entry key="title" value-ref="SORT_ORDER.ASC" />
      </map>
    </property>
    <property name="listableProperties">
      <list>
        <bean class="org.vortikal.web.search.PropertyDisplayConfig">
          <property name="displayProperty" ref="introductionImagePropDef" />
          <property name="preventDisplayProperty" ref="articleListing.hideIntroductionImagePropDef" />
        </bean>
        <bean class="org.vortikal.web.search.PropertyDisplayConfig">
          <property name="displayProperty" ref="publishedDatePropDef" />
          <property name="preventDisplayProperty" ref="articleListing.hidePublishedDatePropDef" />
        </bean>
        <bean class="org.vortikal.web.search.PropertyDisplayConfig">
          <property name="displayProperty" ref="introductionPropDef" />
          <property name="preventDisplayProperty" ref="articleListing.hideIntroductionPropDef" />
        </bean>
      </list>
    </property>
    <property name="aggregationResolver" ref="aggregationResolver" />
  </bean>
  
  <!-- Fetch specifically specified articles, aka 'featured articles' -->
  <bean id="articleListing.featuredArticlesSearchComponent" parent="articleListing.searchComponent">
    <property name="name" value="articleListing.featuredArticles" />
    <property name="recursivePropDef">
      <bean class="org.vortikal.repository.resourcetype.PropertyTypeDefinitionImpl" parent="articleListing.recursiveListingPropDef">
        <property name="vocabulary">
          <bean class="org.vortikal.repository.resourcetype.ValueVocabulary">
            <property name="values">
              <list>
                <ref bean="VALUE_TRUE" />
              </list>
            </property>
          </bean>
        </property>
      </bean>
    </property>
    <property name="query">
      <value>(uri IN {$featuredArticles}) AND (type IN article AND published-date &lt;= {$currentTime})</value>
    </property>
    <property name="aggregationResolver">
      <null />
    </property>
  </bean>

  <!-- Fetch articles from explicitly specified subfolders -->
  <bean id="articleListing.subfoldersSearchComponent" parent="articleListing.searchComponent">
    <property name="name" value="articleListing.subfolderArticles" />
    <property name="query">
      <value>(uri IN {$subfolders}* AND uri NOT IN {$featuredArticles}) AND (type IN article AND published-date &lt;= {$currentTime})</value>
    </property>
    <property name="aggregationResolver">
      <null />
    </property>
  </bean>

  <bean id="articleListing.viewResolver" parent="decoratorViewResolver">
    <property name="views">
      <map>
        <entry key="${override.listing.prefix}articleListing.view" value-ref="${override.listing.prefix}articleListing.view" />
      </map>
    </property>
  </bean>

  <bean id="articleListing.view" parent="collectionListing.view" />

</beans>
