<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">


  <!-- Transaction setup -->
  <bean id="repository.transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="repository.dataSource"/>
  </bean>

  <!-- AOP transaction advice -->
  <tx:advice id="repository.txAdvice" transaction-manager="repository.transactionManager">
    <tx:attributes>
      <!--tx:method name="get*" read-only="true" /-->
      <tx:method name="*" no-rollback-for="org.vortikal.repository.RepositoryException,org.vortikal.security.AuthenticationException" />
      <!--tx:method name="*" /-->
    </tx:attributes>
  </tx:advice>

  <!-- Setup tx advice point-cut for RepositoryImpl instance.
       Only for bean 'repository.internal', we don't want proxies around other beans implementing Repository ! -->
  <aop:config>
    <aop:pointcut id="repository.repositoryOperationPointcut" 
                  expression="execution(* org.vortikal.repository.Repository.*(..)) and bean(repository.internal)"/>
    <aop:advisor advice-ref="repository.txAdvice" pointcut-ref="repository.repositoryOperationPointcut"/>
  </aop:config>

  <!-- Setup tx advice point-cut for ResourceChangeNotifier.pollChanges() --> 
  <aop:config>
    <aop:pointcut id="repository.resourceChangeNotifierPointcut" expression="execution(* org.vortikal.repository.index.observation.ResourceChangeNotifier.pollChanges(..))"/>
    <aop:advisor advice-ref="repository.txAdvice" pointcut-ref="repository.resourceChangeNotifierPointcut"/>
  </aop:config>

  <!-- Repository -->
  <bean id="repository.internal" class="org.vortikal.repository.RepositoryImpl"
        init-method="init" destroy-method="destroy">
    <property name="id" value="${repositoryID}" />
    <property name="tokenManager" ref="tokenManager" />
    <property name="authorizationManager" ref="authorizationManager" />
    <property name="principalManager" ref="principalManager" />
    <property name="dao" ref="${repositoryBackend}" />
    <property name="commentDAO" ref="${repository.commentDao}" />
    <property name="contentStore" ref="${repository.contentStore}" />
    <property name="lockManager" ref="repository.lockManager" />
    <property name="repositoryResourceHelper" ref="repositoryResourceHelper" />
    <property name="tempDir" value="${repository.tempDir}" />
    <property name="maxResourceChildren" value="${repository.maxResourceChildren}" />
    <property name="searcher" ref="systemIndexSearcher" />
    <property name="resourceTypeTree" ref="resourceTypeTree" />
  </bean>
  

  <!-- Wrapper around the repository that caches retrievals when executing in a servlet request: -->
  <bean id="repository" class="org.vortikal.web.RequestLocalRepository">
    <property name="repository" ref="repository.cachePurgeRepository"/>
  </bean>
  <!--  Repository cache purge control wrapper hack -->
  <bean id="repository.cachePurgeRepository" class="org.vortikal.repository.CachePurgeControlRepositoryWrapper">
    <property name="wrappedRepository" ref="repository.internal"/>
    <property name="cache" ref="repository.cache"/>
  </bean>


  <bean id="repository.dataSource" class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close">
    <property name="driverClassName" value="${databaseDriver}" />
    <property name="maxActive" value="${maxDatabaseConnections}" />
    <property name="url" value="${databaseURL}" />
    <property name="username" value="${jdbcUsername}" />
    <property name="password"  value="${jdbcPassword}" />
    <property name="defaultAutoCommit" value="false" />
  </bean>  

  <!-- SqlMap setup for iBATIS Database Layer -->
  <bean id="repository.sqlMapClient"
        class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
    <property name="useTransactionAwareDataSource" value="true" />
    <property name="configLocation"
              value="classpath:/org/vortikal/repository/store/db/ibatis/${sqlDialect}-sql-map-config.xml"/>
    <property name="dataSource" ref="repository.dataSource"/>
    <property name="lobHandler" ref="repository.lobHandler" />
  </bean>

  <bean id="repository.lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" />
  
  <bean id="repository.binaryDao" class="org.vortikal.repository.store.db.SqlBinaryContentMapDataAccessor">
    <property name="sqlMapClient" ref="repository.sqlMapClient" />
    <property name="sqlMaps" ref="repository.statementMappings" />
  </bean>

  <!-- Override iBATIS SQL map statement names in this map (should
       generally not be necessary): -->
  <bean id="repository.statementMappings" class="java.util.HashMap">
    <constructor-arg>
      <map>
      </map>
    </constructor-arg>
  </bean>

  <bean id="repository.sqlMapDao" class="org.vortikal.repository.store.db.SqlMapDataAccessor">
    <lookup-method name="createResourceImpl" bean="resourceImpl"/>
    <property name="sqlMapClient" ref="repository.sqlMapClient"/>
    <property name="sqlMaps" ref="repository.statementMappings" />
    <property name="optimizedAclCopySupported" value="${optimizedAclCopySupported}" />
    <property name="principalFactory" ref="principalFactory" />
  </bean>
  
  <bean id="repository.fsContentStore" 
        class="org.vortikal.repository.store.fs.SimpleFileSystemContentStore">
    <property name="urlEncodeFileNames" value="${urlEncodeFileNames}" />
    <property name="repositoryDataDirectory" value="${repositoryDataDirectory}" />
  </bean>

  <bean id="repository.indexDao" class="org.vortikal.repository.store.db.SqlMapIndexDao">
    <property name="sqlMapClient" ref="repository.sqlMapClient"/>
    <property name="sqlMaps" ref="repository.statementMappings" />
    <property name="resourceTypeTree" ref="resourceTypeTree"/>
    <property name="principalFactory" ref="principalFactory" />
  </bean>
  
  <bean id="repository.changeLogDAO" class="org.vortikal.repository.store.db.SqlMapChangeLogDAO">
    <property name="sqlMapClient" ref="repository.sqlMapClient"/>
    <property name="sqlMaps" ref="repository.statementMappings" />
  </bean>

  <bean id="resourceImpl" class="org.vortikal.repository.ResourceImpl" scope="prototype">
    <property name="resourceTypeTree" ref="resourceTypeTree"/>
  </bean>

  <bean id="repository.cache" class="org.vortikal.repository.store.Cache">
    <property name="maxItems" value="${resourceCacheSize}" />
    <property name="wrappedAccessor" ref="${repository.dao}" />
  </bean>

  <bean id="repository.sqlMapCommentDao"
        class="org.vortikal.repository.store.db.SqlMapCommentDAO">
    <property name="sqlMapClient" ref="repository.sqlMapClient"/>
    <property name="sqlMaps" ref="repository.statementMappings" />
    <property name="principalFactory" ref="principalFactory" />
  </bean>

  <bean id="repositoryAware" abstract="true">
    <description>
      Simple parent template for repository aware controllers.  Just
      saves a couple of lines for each controller having a repository
      property, that's just about all of them
    </description>
    <property name="repository" ref="repository" />
  </bean>

  <bean id="repository.lockManager" class="org.vortikal.repository.LockManager">
    <property name="dao" ref="${repositoryBackend}" />
  </bean>

  <bean id="repositoryResourceHelper"
        class="org.vortikal.repository.RepositoryResourceHelperImpl">
    <property name="authorizationManager" ref="authorizationManager" />
    <property name="resourceTypeTree" ref="resourceTypeTree" />
    <property name="contentStore" ref="${repository.contentStore}"/>
    <property name="contentRepresentationRegistry" ref="contentRepresentationRegistry"/>
  </bean>

  <bean id="typeLocalizationProvider" 
    class="org.vortikal.repository.resourcetype.MessageSourceTypeLocalizationProvider">
    <property name="messageSource">
      <bean class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="vortikal.i18n.resource-types"/>
      </bean>
    </property>
  </bean>

  <bean id="contentRepresentationRegistry"
        class="org.vortikal.repository.content.ContentRepresentationRegistry" />

  <bean id="jdomContentFactory" class="org.vortikal.repository.content.JDOMContentFactory" />

  <bean id="jtidyContentFactory" class="org.vortikal.repository.content.JTidyContentFactory" />
  <bean id="bufferedImageContentFactory" class="org.vortikal.repository.content.BufferedImageContentFactory" />
  <bean id="audioFileContentFactory"
        class="org.vortikal.repository.content.AudioFileContentFactory" />

  <bean id="jsonObjectContentFactory"
        class="org.vortikal.repository.content.JSONObjectContentFactory" />

  <bean id="authorizationManager" class="org.vortikal.repository.AuthorizationManagerImpl">
    <property name="readOnly" value="${repositoryReadOnly}" />
    <property name="principalManager" ref="principalManager" />
    <property name="lockManager" ref="repository.lockManager" />
    <property name="roleManager" ref="roleManager" />
    <property name="dao" ref="${repositoryBackend}" />
  </bean>

  <bean id="repository.archiver" class="org.vortikal.util.repository.ResourceArchiver">
    <property name="repository" ref="repository" />
    <property name="resourceTypeTree" ref="resourceTypeTree" />
    <property name="tempDir" value="${repository.tempDir}" />
    <property name="principalFactory" ref="principalFactory" />
    <property name="principalManager" ref="principalManager" />
  </bean>
	
</beans>
