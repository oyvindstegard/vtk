<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">

  
  <!-- Transaction setup -->

  <bean id="repository.transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="repository.dataSource"/>
  </bean>


  <tx:advice id="txAdvice" transaction-manager="repository.transactionManager">
    <tx:attributes>
      <!--tx:method name="get*" read-only="true" /-->
      <tx:method name="*" no-rollback-for="org.vortikal.repository.RepositoryException,org.vortikal.security.AuthenticationException" />
    </tx:attributes>
  </tx:advice>

  <aop:config>
    <aop:pointcut id="repository.repositoryOperationPointcut" expression="execution(* org.vortikal.repository.Repository.*(..))"/>
    <aop:advisor advice-ref="txAdvice" pointcut-ref="repository.repositoryOperationPointcut"/>
  </aop:config>

  <aop:config>
    <aop:pointcut id="repository.resourceChangeNotifierPointcut" expression="execution(* org.vortikal.repositoryimpl.index.observation.ResourceChangePoller.pollChanges(..))"/>
    <aop:advisor advice-ref="txAdvice" pointcut-ref="repository.resourceChangeNotifierPointcut"/>
  </aop:config>

  <!-- XXX: clarify what methods to make transactional: -->
  <!--
  <aop:config>
    <aop:pointcut id="repository.indexDataAccessorPointcut" expression="execution(* org.vortikal.repositoryimpl.store.db.IndexDataAccessorImpl.*(..))"/>
    <aop:advisor advice-ref="txAdvice" pointcut-ref="repository.indexDataAccessorPointcut"/>
  </aop:config>
  -->

  <!--
  <aop:config>
    <aop:pointcut id="repository.changeFetcherPointcut" expression="execution(* org.vortikal.repositoryimpl.store.db.JDBCResourceChangeFetcher.*(..))"/>
    <aop:advisor advice-ref="txAdvice" pointcut-ref="repository.changeFetcherPointcut"/>
  </aop:config>
  -->

  <!-- Repository -->


  <bean id="repository" class="org.vortikal.repositoryimpl.RepositoryImpl">
    <property name="id" value="${repositoryID}" />
    <property name="tokenManager" ref="tokenManager" />
    <property name="roleManager" ref="roleManager" />
    <property name="authorizationManager" ref="authorizationManager" />
    <property name="dao" ref="${repositoryBackend}" />
    <property name="commentDAO" ref="repository.commentDAO" />
    <property name="contentStore" ref="repository.contentStore" />
    <property name="lockManager" ref="lockManager" />
    <property name="repositoryResourceHelper" ref="repositoryResourceHelper" />
  </bean>


  <bean id="repository.dataSource" class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close">
    <property name="driverClassName" value="${databaseDriver}" />
    <property name="maxActive" value="${maxDatabaseConnections}" />
    <property name="url" value="${databaseURL}" />
    <property name="username" value="${jdbcUsername}" />
    <property name="password"  value="${jdbcPassword}" />
    <property name="defaultAutoCommit" value="false" />
  </bean>

  

  <!-- SqlMap setup for iBATIS Database Layer -->

  <bean id="repository.sqlMapClient"
        class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
    <property name="useTransactionAwareDataSource" value="true" />
    <property name="configLocation"
              value="classpath:/org/vortikal/repositoryimpl/store/db/ibatis/${sqlDialect}-sql-map-config.xml"/>
    <property name="dataSource" ref="repository.dataSource"/>
  </bean>

  <!-- Override iBATIS SQL map statement names in this map (should
       generally not be necessary): -->
  <bean id="repository.statementMappings" class="java.util.HashMap">
    <constructor-arg>
      <map>
      </map>
    </constructor-arg>
  </bean>


  <bean id="repository.database" class="org.vortikal.repositoryimpl.store.db.SqlMapDataAccessor">
    <property name="sqlMapClient" ref="repository.sqlMapClient"/>
    <property name="propertyManager" ref="propertyManager" />
    <property name="authorizationManager" ref="authorizationManager" />
    <property name="principalFactory" ref="principalFactory" />
    <property name="sqlMaps" ref="repository.statementMappings" />
    <property name="optimizedAclCopySupported" value="${optimizedAclCopySupported}" />
  </bean>

  <bean id="repository.cache" class="org.vortikal.repositoryimpl.store.Cache">
    <property name="maxItems" value="${resourceCacheSize}" />
    <property name="wrappedAccessor" ref="repository.database" />
  </bean>

  <bean id="repository.commentDAO" class="org.vortikal.repositoryimpl.store.db.SqlMapCommentDAO">
    <property name="sqlMapClient" ref="repository.sqlMapClient"/>
    <property name="sqlMaps" ref="repository.statementMappings" />
  </bean>

  <!--
  <bean id="repository.cache" class="org.vortikal.repositoryimpl.store.JBossCacheDataAccessor">
    <property name="wrappedAccessor" ref="repository.database" />
    <property name="treeCache" ref="jbossTreeCache" />
  </bean>

  <bean id="jbossTreeCache" class="org.jboss.cache.TreeCache"
        init-method="startService" destroy-method="stopService">
  </bean>
  -->


  <bean id="repository.indexDataAccessor" class="org.vortikal.repositoryimpl.store.db.IndexDataAccessorImpl">
    <property name="dataSource" ref="repository.dataSource" />
    <property name="propertyManager" ref="propertyManager" />
    <property name="principalFactory" ref="principalFactory" />
    <property name="sqlMapClient" ref="repository.sqlMapClient"/>
    <property name="sqlMaps" ref="repository.statementMappings"/>
    
    <!-- Only temporary -->
    <property name="sqlDialect" value="${sqlDialect}"/>

    <!-- How many results to process at a time when authorizing query result sets
        against database -->
    <property name="queryAuthorizationBatchSize" value="1000"/>
  </bean>

  <bean id="repository.contentStore" 
        class="org.vortikal.repositoryimpl.store.fs.SimpleFileSystemContentStore">
    <property name="urlEncodeFileNames" value="${urlEncodeFileNames}" />
    <property name="repositoryDataDirectory" value="${repositoryDataDirectory}" />
  </bean>


  <bean id="repository.requestLocal" class="org.vortikal.web.RequestLocalRepository">
    <property name="repository" ref="repository"/>
  </bean>

  <bean id="requestLocalRepositoryAware" abstract="true">
    <description>
      Simple parent template for repository aware controllers.  Just
      saves a couple of lines for each controller having a repository
      property, that's just about all of them
    </description>
    <property name="repository" ref="repository.requestLocal" />
  </bean>

  <bean id="lockManager" class="org.vortikal.repositoryimpl.LockManager">
    <property name="dao" ref="${repositoryBackend}" />
  </bean>

  <bean id="valueFactory" class="org.vortikal.repository.resourcetype.ValueFactoryImpl">
    <property name="principalFactory" ref="principalFactory"/>
    <property name="dateFormats">
      <list>
        <value>dd.MM.yyyy HH:mm:ss</value>
        <value>dd.MM.yyyy HH:mm</value>
        <value>dd.MM.yyyy</value>
        <value>yyyy-MM-dddd HH:mm:ss</value>
        <value>yyyy-MM-dddd HH:mm</value>
        <value>yyyy-MM-dddd</value>
      </list>  
    </property>
  </bean>

  <bean id="propertyManager" class="org.vortikal.repositoryimpl.PropertyManagerImpl">
    <property name="valueFactory" ref="valueFactory"/>
    <property name="resourceTypeTree" ref="resourceTypeTree" />
  </bean>

  <bean id="repositoryResourceHelper"
        class="org.vortikal.repositoryimpl.RepositoryResourceHelperImpl">
    <property name="authorizationManager" ref="authorizationManager" />
    <property name="propertyManager" ref="propertyManager" />
    <property name="resourceTypeTree" ref="resourceTypeTree" />
    <property name="contentStore" ref="repository.contentStore"/>
    <property name="contentRepresentationRegistry" ref="contentRepresentationRegistry"/>
  </bean>
  
  <bean id="resourceTypeTree"
        class="org.vortikal.repositoryimpl.ResourceTypeTreeImpl" />

  <bean id="contentRepresentationRegistry"
        class="org.vortikal.repositoryimpl.content.ContentRepresentationRegistry" />

  <bean id="jdomContentFactory" class="org.vortikal.repositoryimpl.content.JDOMContentFactory" />


  <bean id="jtidyContentFactory" class="org.vortikal.repositoryimpl.content.JTidyContentFactory" />
  <bean id="bufferedImageContentFactory" class="org.vortikal.repositoryimpl.content.BufferedImageContentFactory" />
  <bean id="audioFileContentFactory"
        class="org.vortikal.repositoryimpl.content.AudioFileContentFactory" />


  <bean id="authorizationManager" class="org.vortikal.repositoryimpl.AuthorizationManagerImpl">
    <property name="readOnly" value="${repositoryReadOnly}" />
    <property name="principalManager" ref="principalManager" />
    <property name="lockManager" ref="lockManager" />
    <property name="roleManager" ref="roleManager" />
    <property name="dao" ref="${repositoryBackend}" />
  </bean>

  <!-- Quartz scheduled jobs -->

  <bean id="repository.schedulerFactory"
        class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
    <property name="triggers">
      <list>
        <ref local="repository.unlockSimpleTrigger"/>
      </list>
    </property>
  </bean>


  <bean id="repository.unlockSimpleTrigger"
        class="org.springframework.scheduling.quartz.SimpleTriggerBean">
    <property name="jobDetail">
      <!-- see the example of method invoking job above -->    
      <ref bean="repository.cleanupLocksJobDetail"/>
    </property>
    <property name="startDelay">
      <!-- 60 seconds -->
      <value>60000</value>
    </property>
    <property name="repeatInterval">
      <!-- repeat every 600 seconds -->
      <value>600000</value>
    </property>
  </bean>

  <bean id="repository.cleanupLocksJobDetail" 
        class="org.vortikal.scheduling.quartz.VortikalMethodInvokingJobDetailFactoryBean">
    <property name="group" value="repository" />
    <property name="targetObject"><ref bean="repository.database"/></property>
    <property name="targetMethod"><value>deleteExpiredLocks</value></property>
  </bean>

   <bean id="messageSource"
         class="org.vortikal.web.context.ChildDelegatingMessageSource">
   </bean>

   <bean id="defaultMessageSource"
         class="org.springframework.context.support.ResourceBundleMessageSource">
     <property name="basenames">
       <list>
         <value>vortikal.i18n.messages</value>
       </list>
     </property>
   </bean>

<!--
  <bean id="repository.importer" class="org.vortikal.repositoryimpl.DataImportUtil">
    <property name="repository" ref="repository" />
  </bean>


  <bean id="repository.evaluator" class="org.vortikal.repositoryimpl.EvaluatorUtil">
    <property name="propertyManager" ref="propertyManager" />
    <property name="dataAccessor" ref="repository.database" />
  </bean>
-->

<!--   <bean class="org.vortikal.repositoryimpl.ResourceImpl" scope="prototype"> -->
<!--     <property name="propertyManager" ref="propertyManager"/> -->
<!--     <property name="authorizationManager" ref="authorizationManager" /> -->
<!--   </bean> -->


</beans>
