getDescription() {
    return "Displays information about a resource";
}

getUsage() {
    return "repo info <uri:string>";
}

void execute(context, args, out) {

    repo = context.get("context").getBean("repository");
    token = context.get("context").getBean("writeAllToken");

    uri = args.get("uri");

    if (!repo.exists(token, uri)) {
        out.println("No such resource");
        return;
    }

    r = repo.retrieve(token, uri, true);

    out.println("type: " + r.getResourceType());
    out.println("props:");
    for (p: r.getProperties()) {
        out.print(p.getDefinition().getName() + ": " );
        out.println(p.getFormattedValue());
    }

    acl = r.getAcl();
    out.println("");
    out.println("acl:");
    out.println("inherited: " + r.isInheritedAcl());
    for (action: acl.getActions()) {
        out.print(action + ":");
        for (p: acl.listPrivilegedUsers(action)) out.print(" " + p); 
        for (p: acl.listPrivilegedGroups(action)) out.print(" " + p); 
        for (p: acl.listPrivilegedPseudoPrincipals(action)) out.print(" " + p);
        out.println("");
    }

    lock = r.getLock();
    if (lock != null) {
        out.println("");
        out.println("lock:");
        out.println("token: " + lock.getLockToken());
        out.println("principal: " + lock.getPrincipal());
        out.println("timeout: " + lock.getTimeout());
    }

}
