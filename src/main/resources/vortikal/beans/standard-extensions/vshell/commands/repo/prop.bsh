getDescription() {
    return "Displays a specified property value for a given resource";
}

getUsage() {
    return "repo prop <uri:path> <prop:string> [<display-binary:boolean>]";
}

void execute(context, args, out) {

    repo = context.get("context").getBean("repository");
    token = context.get("context").getBean("writeAllToken");

    uri = args.get("uri");

    if (!repo.exists(token, uri)) {
        out.println("No such resource");
        return;
    }

    prop = args.get("prop");
    displayBinary = "true".equals(args.get("display-binary"));

    r = repo.retrieve(token, uri, true);
    prefix = null;
    
    if (prop.contains(":")) {
        prefix = prop.substring(0, prop.indexOf(":"));
        prop = prop.substring(prefix.length() + 1);
    }

    p = r.getPropertyByPrefix(prefix, prop);
    if (p == null) {
        out.println("No such property");
        return;
    }

    if (p.getType() == org.vortikal.repository.resourcetype.PropertyType.Type.BINARY) {
        if (!displayBinary) {
            out.println(" [binary: " + p.getBinaryMimeType() + "]");
        } else {
            binaryStream = p.getBinaryStream();
            length = (int) binaryStream.getLength();
            // XXX: check max length
            
            in = binaryStream.getStream();
            byte[] buf = new byte[length];
            int n = in.read(buf);
            out.println(new String(buf, "utf-8"));
        }
    } else {
        out.println("Type: " + p.getType());
        out.println(p.getFormattedValue());
    }
}
