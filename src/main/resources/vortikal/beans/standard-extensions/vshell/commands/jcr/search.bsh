import javax.jcr.*;
import javax.jcr.query.*;
import javax.jcr.version.*;

getDescription() {
    return "Searches the JCR repository using SQL syntax";
}

getUsage() {
    return "jcr search <query:string...>";
}

void execute(context, args, out) {
    
    jcr = context.get("context").getBean("jcr.repository");
    creds = new SimpleCredentials("system", "".toCharArray());
    query = args.get("query");
    session = jcr.login(creds);
    try {
        search(session, query, out);
    } finally {
        session.logout();
    }
}

search(session, stmt, out) {
    try {
        query = session.getWorkspace().getQueryManager().createQuery(stmt, Query.SQL);
    } catch (t) {
        out.println("Invalid query: " + t.getMessage());
        return;
    }

    result = query.execute();

    cols = result.getColumnNames();
    out.println(Arrays.asList(cols));
    rows = result.getRows();
    n = 0;
    while (rows.hasNext()) {
        n++;
        row = rows.next();
        display = new StringBuilder();

        for (name: cols) {
            val = row.getValue(name);
            if (val == null) {
                display.append("NULL");
            } else {
                switch (val.getType()) {
                    case PropertyType.LONG:
                    case PropertyType.DOUBLE:
                    case PropertyType.STRING:
                    case PropertyType.BOOLEAN:
                    case PropertyType.PATH:
                    case PropertyType.REFERENCE:
                    case PropertyType.NAME:
                        display.append(val.getString());
                        break;

                    case PropertyType.DATE:
                        display.append(val.getDate().getTime());
                        break;

                    default:
                        display.append(val);
                        break;
                }
            }
            display.append("\t");
                
        }
        out.println(display);
    }
    out.println(n + " rows");
}
