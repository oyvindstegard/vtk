getDescription() {
    return "Searches the repository";
}


getUsage() {
    return "repo search <query:string> [<properties:string...>]";
}

void execute(context, args, out) {

    repo = context.get("context").getBean("repository");
    token = context.get("context").getBean("writeAllToken");
    indexSearcher = context.get("context").getBean("systemIndexSearcher");
    queryParserFactory = context.get("context").getBean("queryParserFactory");

    queryExp = args.get("query");

    parser = queryParserFactory.getParser();
    query = parser.parse(queryExp);

    search = new org.vortikal.repository.search.Search();
    search.setQuery(query);

    rs = indexSearcher.execute(token, search);

    propList = args.get("properties");

    for (r: rs.getAllResults()) {
        out.println(r.getURI());
        if (propList != null) {
            for (propName: propList) {
                p = propName;
                prefix = null;
                
                if (p.contains(":")) {
                    prefix = p.substring(0, p.indexOf(":"));
                    p = p.substring(prefix.length() + 1);
                }
                prop = r.getPropertyByPrefix(prefix, p);
                if (prop.getType() == org.vortikal.repository.resourcetype.PropertyType.Type.BINARY) {
                    out.println("  " + propName + ": [binary]");
                } else {
                    out.println("  " + propName + ": " + prop.getValue());
                }
            }
        }
    }
    out.println();
    out.println("[Total results fetched: " + rs.getSize() + ", total hits: " + rs.getTotalHits() + "]");
}


