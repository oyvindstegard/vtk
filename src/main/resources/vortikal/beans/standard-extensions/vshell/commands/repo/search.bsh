import org.vortikal.repository.search.*;

getDescription() {
    return "Searches the repository";
}


getUsage() {
    return "repo search [-limit:number] [-sort:string] <query:string> [-properties:string...]";
}

void execute(context, args, out) {

    repo = context.get("context").getBean("repository");
    token = context.get("context").getBean("writeAllToken");
    indexSearcher = context.get("context").getBean("systemIndexSearcher");
    queryParserFactory = context.get("context").getBean("queryParserFactory");
    rtt = context.get("context").getBean("resourceTypeTree");

    queryExp = args.get("query");

    limit = args.get("limit");
    sortArg = args.get("sort");
    directionArg = args.get("direction");

    parser = queryParserFactory.getParser();
    try {
        query = parser.parse(queryExp);
    } catch (t) {
        out.println(t.getMessage());
        return;
    }
    search = new org.vortikal.repository.search.Search();
    search.setQuery(query);
    if (limit != null && limit >= 0) {
        search.setLimit(limit);
    }
    if (sortArg != null) {
        sorting = new SortingImpl();
        direction = null;
        if (sortArg.trim().contains(" ")) {
            dir = sortArg.substring(sortArg.indexOf(" ") + 1);
            sortArg = sortArg.substring(0, sortArg.length() - dir.length() - 1);
            direction = "asc".equals(dir) ? SortFieldDirection.ASC : SortFieldDirection.DESC;
        }

        sf = null;
        if ("type".equals(sortArg) || "name".equals(sortArg) || "uri".equals(sortArg)) {
            if (direction != null) {
                sf = new TypedSortField(sortArg, direction);
            } else {
                sf = new TypedSortField(sortArg);
            }
        } else {
            prefix = null;
            name = null;
            if (sortArg.contains(":")) {
                prefix = sortArg.substring(0, sortArg.indexOf(":"));
                name = sortArg.substring(prefix.length() + 1);
            } else {
                prefix = null;
                name = sortArg;
            }
            propDef = rtt.getPropertyDefinitionByPrefix(prefix, name);
            if (propDef != null) {
                if (direction != null) {
                    sf = new PropertySortField(propDef, direction);
                } else {
                    sf = new PropertySortField(propDef);
                }
            }
        }
        if (sf != null) {
            sorting.addSortField(sf);
            search.setSorting(sorting);
        }
    }


    rs = indexSearcher.execute(token, search);

    propList = args.get("properties");
    wildcard = propList != null && propList.contains("*");

    for (r: rs.getAllResults()) {
        out.println(r.getURI());
        if (propList != null) {
            if (wildcard) {
                for (prop: r.getProperties()) {
                    printProp(prop, out);
                }
            } else {
                for (propName: propList) {
                    p = propName;
                    prefix = null;
                
                    if (p.contains(":")) {
                        prefix = p.substring(0, p.indexOf(":"));
                        p = p.substring(prefix.length() + 1);
                    }
                    prop = r.getPropertyByPrefix(prefix, p);
                    if (prop == null) continue;
                    printProp(prop, out);
                }
            }
        }
    }
    out.println();
    out.println("[Total results fetched: " + rs.getSize() + ", total hits: " + rs.getTotalHits() + "]");
}

void printProp(prop, out) {
    if (prop.getType() == org.vortikal.repository.resourcetype.PropertyType.Type.BINARY) {
        out.println("  " + prop.getDefinition().getName() + ": [binary]");
    } else {
        if (prop.getDefinition().isMultiple()) {
            out.println("  " + prop.getDefinition().getName() + ": " + java.util.Arrays.asList(prop.getValues()));
        } else {
            out.println("  " + prop.getDefinition().getName() + ": " + prop.getValue());
        }
    }
}
