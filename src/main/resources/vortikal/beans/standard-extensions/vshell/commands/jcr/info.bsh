import javax.jcr.*;
import javax.jcr.query.*;
import javax.jcr.version.*;

getDescription() {
    return "Prints information about a JCR node at a given path";
}

getUsage() {
    return "jcr info <path:string>";
}

void execute(context, args, out) {
    
    jcr = context.get("context").getBean("jcr.repository");
    creds = new SimpleCredentials("system", "".toCharArray());
    path = args.get("path");
    session = jcr.login(creds);
    try {
        info(session, path, out);
    } finally {
        session.logout();
    }
}

info(session, path, out) {
    node = session.getItem(path);
    if (node instanceof javax.jcr.Property) {
        prop = node;
        out.println("prop: " + prop.getName());
        def = prop.getDefinition();
        out.println("definition: " + def.getName());
        out.println("onparentversion: " + OnParentVersionAction.nameFromValue(def.getOnParentVersion()));
        return;
    } 

    out.println("node: " + node.getPath());
    out.println("node def: " + node.getDefinition().getName());

    out.println("\nprops:");
    props = node.getProperties();
    display = new StringBuilder();
    while (props.hasNext()) {
        prop = props.next();
        display.append(prop.getName()).append(": ");

        if (PropertyType.BINARY == prop.getType()) {
            display.append(" [binary]");

        } else if (prop.getDefinition().isMultiple()) {
            display.append("[]");

        } else {
            display.append(prop.getString());
        }
        display.append("\n");
    }

    if (node.isLocked()) {
        lock = node.getLock();
        display.append("\nlock:\n");
        display.append("token: ").append(lock.getLockToken()).append("\n");
        display.append("owner: ").append(lock.getLockOwner()).append("\n");
        display.append("node: ").append(lock.getNode().getPath()).append("\n");
        display.append("deep: ").append(lock.isDeep()).append("\n");
        display.append("live: ").append(lock.isLive()).append("\n");
        display.append("session-scoped: ").append(lock.isSessionScoped()).append("\n");
        display.append("\n");
    }

    if (node.isNodeType("mix:versionable")) {
        display.append("\nversion history:\n\n");
        vh = node.getVersionHistory();
        for (v: vh.getAllVersions()) {
            display.append(v.getName()).append(": ");
            display.append(v.getCreated().getTime());
            if (node.getBaseVersion().equals(v)) display.append(" [current base]");
            display.append("\npath: " + v.getPath());
            display.append("\n\n");
        }
    }
    
    nodes = node.getNodes("*");
    if (nodes.hasNext()) {
        display.append("\nnodes:\n");
        while (nodes.hasNext()) {
            child = nodes.next();
            display.append(child.getName()).append("\n");
        }
    }

    out.println(display.toString());

}
