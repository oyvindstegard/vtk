<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
                           http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.1.xsd">

  <!-- Root admin entry service (abstract without handler) -->
  <bean id="repositoryManageService" class="vtk.web.service.ServiceImpl">
    <property name="parent" ref="webService" />
    <property name="order" value="350" />
    <property name="assertions">
      <list>
        <bean class="vtk.web.service.OrAssertion">
          <property name="assertions">
            <list>
              <bean class="vtk.web.service.PrincipalQualifiedNameAssertion">
                <property name="username" value="root@localhost"/>
              </bean>
              <bean class="vtk.web.service.PrincipalQualifiedNameAssertion">
                <property name="username" value="vortex@services.uio.no"/>
              </bean>
            </list>
          </property>
        </bean>
        <bean class="vtk.web.service.RequestParameterAssertion">
          <property name="parameterName" value="vrtx" />
          <property name="parameterValue" value="root" />
        </bean>
      </list>
    </property>
    <property name="servletFilters">
      <list>
        <ref bean="system.decoratingFilter" />
      </list>
    </property>
    <property name="attributes">
      <map>
        <entry key-ref="system.decoratorTemplateAttribute" value="root-admin.html" />
        <entry key="remove-caching" value="true" />
      </map>
    </property>
  </bean>

  <!-- Service tabs stuff for root admin -->
  <bean id="rootManage.tabServicesFactory" class="vtk.util.SortedCollection">
    <constructor-arg>
      <bean class="vtk.web.service.ServiceAttributeComparator">
        <property name="attributeName" value="tabOrder" />
      </bean>
    </constructor-arg>
    <constructor-arg name="unique" value="true" />
  </bean>

  <bean id="rootManage.tabsBuilder"
        class="org.springframework.beans.factory.config.MethodInvokingBean" abstract="true">
    <property name="targetObject" ref="rootManage.tabServicesFactory" />
    <property name="targetMethod" value="add" />
  </bean>

  <bean id="rootManage.tabsComponent"
        class="vtk.web.decorating.components.ViewRenderingDecoratorComponent">
    <property name="namespace" ref="decorating.manageNamespace" />
    <property name="name" value="root-tabs" />
    <property name="description" value="Displays the default admin tabs" />
    <property name="view" ref="rootManage.tabView" />
  </bean>

  <bean id="rootManage.tabView" parent="freemarkerView">
    <property name="url" value="layouts/tabs.ftl" />
    <property name="referenceDataProviders">
      <list>
        <ref bean="rootManage.tabsProvider" />
      </list>
    </property>
  </bean>

  <bean id="rootManage.tabsProvider" 
        class="vtk.web.view.components.menu.DefaultListMenuProvider">
    <constructor-arg ref="rootManage.tabServicesFactory" />
    <constructor-arg value="tabs"/>
    <property name="matchAncestorServices" value="true" />
  </bean>

  <!-- Metrics is default root admin service (first tab), service order 0 -->
  
  <bean id="rootManage.metricsService" class="vtk.web.service.ServiceImpl">
    <property name="parent" ref="repositoryManageService" />
    <property name="assertions">
      <list>
        <bean class="vtk.web.service.PrincipalQualifiedNameAssertion">
          <property name="username" value="root@localhost"/>
        </bean>
      </list>
    </property>
    <property name="attributes">
      <map>
        <entry key="tabOrder"><value type="java.lang.Integer">-400</value></entry>
      </map>
    </property>
    <property name="handler" ref="rootManage.metricsHandler">
    </property>
  </bean>

  <bean id="rootManage.metricsHandler" class="org.springframework.web.servlet.mvc.ParameterizableViewController">
    <property name="view">
      <bean parent="freemarkerView">
        <property name="url" value="pages/root/metrics.ftl" />
        <property name="referenceDataProviders">
          <list>
            <ref bean="rootManage.metricsDataProvider"/>
          </list>
        </property>
      </bean>
    </property>
  </bean>
  
  <lang:groovy id="rootManage.metricsDataProvider">
    <lang:inline-script><![CDATA[
      import vtk.web.referencedata.*
      import com.codahale.metrics.*
      import javax.servlet.http.HttpServletRequest
      class MetricsProvider implements ReferenceDataProvider {
          private MetricRegistry registry
          void setRegistry(MetricRegistry registry) {
              this.registry = registry
          }
          void referenceData(Map<String, Object> model, HttpServletRequest request) {
              model.put("gauges", registry.getGauges())
              model.put("meters", registry.getMeters())
              model.put("counters", registry.getCounters())
              model.put("timers", registry.getTimers())
              model.put("histograms", registry.getHistograms())
          }
      }
    ]]></lang:inline-script>
    <lang:property name="registry" ref="metrics.registry" />
  </lang:groovy>

  <bean parent="rootManage.tabsBuilder">
    <property name="arguments" ref="rootManage.metricsService"/>
  </bean>

  <!-- Resource types tree -->

  <bean id="rootManage.resourceTypesService" class="vtk.web.service.ServiceImpl">
    <property name="parent" ref="repositoryManageService" />
    <property name="order" value="-1" />
    <property name="assertions">
      <list>
        <bean class="vtk.web.service.PrincipalQualifiedNameAssertion">
          <property name="username" value="root@localhost"/>
        </bean>
        <bean class="vtk.web.service.RequestParameterAssertion">
          <property name="parameterName" value="mode" />
          <property name="parameterValue" value="resourcetypes" />
        </bean>
      </list>
    </property>
    <property name="attributes">
      <map>
        <entry key="tabOrder"><value type="java.lang.Integer">-300</value></entry>
      </map>
    </property>
    <property name="handler" ref="rootManage.resourceTypesHandler"/>
  </bean>

  <lang:groovy id="rootManage.resourceTypesHandler">
    <lang:inline-script><![CDATA[
      import org.springframework.web.servlet.mvc.*
      import org.springframework.web.servlet.*
      import javax.servlet.http.*
      import vtk.repository.*
      class ResourceTypesDumper implements Controller {
          ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {
              response.setHeader('Content-type', 'text/html; charset=utf-8')
              def tree_html = types.getResourceTypeTreeAsString()
                              .replaceAll(/(\+-- [^\s]+)/, /<span style='font-weight:bold'>$1<\/span>/)
                              .replaceAll(/(?m)^(\s[a-zA-Z-]+)/, /<span style='font-weight:bold'>$1<\/span>/)
              def w = response.getWriter()
              w.print("""<!DOCTYPE html>
<html><head><title>Resource types</title></head>
<body><h2>Resource types</h2>
<p style='white-space: pre; font-size: 120%; font-family: monospace'>""" + tree_html + '</p></body>')
              w.close()
              return null
          }

          private ResourceTypeTree types
          void setResourceTypeTree(ResourceTypeTree types) {
              this.types = types
          }
      }
    ]]></lang:inline-script>
    <lang:property name="resourceTypeTree" ref="resourceTypeTree" />
  </lang:groovy>

  <bean parent="rootManage.tabsBuilder">
    <property name="arguments" ref="rootManage.resourceTypesService"/>
  </bean>

  <!-- Service tree -->

  <bean id="rootManage.serviceTreeService" class="vtk.web.service.ServiceImpl">
    <property name="parent" ref="repositoryManageService" />
    <property name="order" value="-1" />
    <property name="assertions">
      <list>
        <bean class="vtk.web.service.PrincipalQualifiedNameAssertion">
          <property name="username" value="root@localhost"/>
        </bean>
        <bean class="vtk.web.service.RequestParameterAssertion">
          <property name="parameterName" value="mode" />
          <property name="parameterValue" value="services" />
        </bean>
      </list>
    </property>
    <property name="attributes">
      <map>
        <entry key="tabOrder"><value type="java.lang.Integer">-300</value></entry>
      </map>
    </property>
    <property name="handler" ref="rootManage.serviceTreeHandler">
    </property>
  </bean>
  
  <lang:groovy id="rootManage.serviceTreeHandler">
    <lang:inline-script><![CDATA[
      import org.springframework.web.servlet.mvc.*
      import org.springframework.web.servlet.*
      import org.springframework.context.*
      import javax.servlet.http.*
      import vtk.web.*
      class ServiceTreeDumper implements Controller, ApplicationContextAware {
          ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {
              response.setHeader('Content-type', 'text/html; charset=utf-8')
              def tree_html = context.getBean('requestContextInitializer').printServiceTree(true).toString()
              tree_html = tree_html.replaceAll(/(->[^\s]+)/, /<span style='font-weight:bold'>$1<\/span>/)
              def w = response.getWriter()
              w.print("""<!DOCTYPE html>
<html><head><title>Services</title></head>
<body><h2>Services</h2><p style='white-space: pre; font-size: 120%; font-family: monospace'>""" + tree_html + '</p></body>')
              w.close()
              return null
          }
          private ApplicationContext context
          void setApplicationContext(ApplicationContext context){
              this.context = context
          }
      }
    ]]></lang:inline-script>
  </lang:groovy>

  <bean parent="rootManage.tabsBuilder">
    <property name="arguments" ref="rootManage.serviceTreeService" />
  </bean>

  <!-- repository read only -->

  <bean id="repositoryReadOnlyService"
        class="vtk.web.service.ServiceImpl">
    <description>
      Service for bringing the repository in and out of read-only mode.
      Request parameters: action=set-read-only&amp;read-only={true,false}
    </description>
    <property name="parent" ref="repositoryManageService" />
    <property name="order" value="-1" />
    <property name="attributes">
      <map>
        <entry key="tabOrder"><value type="java.lang.Integer">0</value></entry>
      </map>
    </property>
    <property name="assertions">
      <list>
        <bean class="vtk.web.service.PrincipalQualifiedNameAssertion">
          <property name="username" value="root@localhost"/>
        </bean>
        <bean class="vtk.web.service.RequestParameterAssertion">
          <property name="parameterName" value="action" />
          <property name="parameterValue" value="read-only" />
        </bean>
      </list>
    </property>
    <property name="handler" ref="repositoryReadOnlyHandler" />
  </bean>

  <bean parent="rootManage.tabsBuilder">
    <property name="arguments" ref="repositoryReadOnlyService" />
  </bean>

  <bean id="repositoryReadOnlyHandler"
        class="org.springframework.web.servlet.mvc.ParameterizableViewController">
    <property name="viewName" value="repositoryReadOnlyView" />
  </bean>

  <bean id="repositoryReadOnlyStateProvider" class="vtk.web.actions.repo.RepositoryReadOnlyStateProvider">
    <property name="authorizationManager" ref="authorizationManager" />
  </bean>
  <bean parent="vtk.globalHeaders.referenceDataProvider">
    <property name="arguments" ref="repositoryReadOnlyStateProvider" />
  </bean>


  <bean id="repositoryReadOnlyView" parent="freemarkerView">
    <property name="url" value="pages/root/repository-read-only.ftl" />
    <property name="referenceDataProviders">
      <list>
        <ref bean="resourceContextProvider" />
        <ref bean="repositoryReadOnlyStateProvider" />
        <bean class="vtk.web.referencedata.provider.ResourceServiceURLProvider">
          <property name="service" ref="setRepositoryReadOnlyService" />
          <property name="modelName" value="setReadOnlyUrl" />
        </bean>
        <bean class="vtk.web.referencedata.provider.ResourceServiceURLProvider">
          <property name="service" ref="unsetRepositoryReadOnlyService" />
          <property name="modelName" value="unsetReadOnlyUrl" />
        </bean>
      </list>
    </property>
  </bean>

  <bean id="setRepositoryReadOnlyService" class="vtk.web.service.ServiceImpl">
    <property name="parent" ref="repositoryReadOnlyService" />
    <property name="assertions">
      <list>
        <bean class="vtk.web.service.RequestParameterAssertion">
          <property name="parameterName" value="read-only" />
          <property name="parameterValue" value="true" />
        </bean>
      </list>
    </property>
    <property name="handler" ref="repositoryReadOnlyController" />
  </bean>

  <bean id="unsetRepositoryReadOnlyService" class="vtk.web.service.ServiceImpl">
    <property name="parent" ref="repositoryReadOnlyService" />
    <property name="assertions">
      <list>
        <bean class="vtk.web.service.RequestParameterAssertion">
          <property name="parameterName" value="read-only" />
          <property name="parameterValue" value="false" />
        </bean>
      </list>
    </property>
    <property name="handler" ref="repositoryReadOnlyController" />
  </bean>

  <bean id="repositoryReadOnlyController"
        class="vtk.web.actions.repo.RepositoryReadOnlyController">
    <property name="repository" ref="repository" />
    <property name="viewName" value="repositoryReadOnlyView" />
    <property name="parameterName" value="read-only" />
  </bean>


  <bean id="repository.displayResourceTypeTreeService" class="vtk.web.service.ServiceImpl">
    <property name="order" value="-96000" />
    <property name="assertions">
      <bean class="vtk.web.service.RequestURIRegexpAssertion">
        <property name="pattern" value="${resourceTypeTreeService.displayURL}" />
      </bean>
    </property>
    <property name="handler" ref="repository.displayResourceTypeTreeController" />
  </bean>

  <bean id="repository.displayResourceTypeTreeController" class="vtk.web.display.MethodInvokingController">
    <property name="targetObject" ref="resourceTypeTree" />
    <property name="targetMethod" value="getResourceTypeTreeAsString" />
  </bean>

</beans>
