<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">
  
  <!-- @Required annotations -->
  <bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor" />
  
  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="ignoreResourceNotFound" value="true" />
    <property name="locations" ref="vtk.configLocations" />
    <!-- System properties may override placeholders: -->
    <property name="systemPropertiesMode" value="2" />
    <!--property name="nullValue" value="[[null]]" /-->
  </bean>
 
  <bean id="vrtx" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
    <property name="locations" ref="vtk.configLocations" />
    <property name="ignoreResourceNotFound" value="true" />
  </bean>

  <bean id="ordered" abstract="true">
    <property name="comparator">
      <bean class="org.springframework.core.OrderComparator" />
    </property>
  </bean>

  <!-- Context Initializers -->
  <bean id="requestContextInitializer" class="vtk.web.RequestContextInitializer"
    lazy-init="true">
    <description> This bean is required in order to initialize requests with the
      request context. The request context contains the service and the URI for
      each request. (See classes vtk.web.RequestContext and
      vtk.web.service.Service) </description>
    <property name="trustedToken" ref="trustedToken" />
    <property name="repository" ref="repository" />
    <property name="indexFileResolver" ref="indexFileResolver" />
    <property name="principalMetadataDAO" ref="principalMetadataDAO"/>
    <property name="services" ref="services" />
    <property name="nonRepositoryRoots">
      <set>
        <value>${vrtx.staticResourcesBaseURL}</value>
      </set>
    </property>
    <property name="viewUnauthenticatedParameter" value="x-prevent-decorating"/>
  </bean>
  
  <bean id="vtk.globalHeaders.provider" class="vtk.web.filter.TemplateHeaderProvider">
    <constructor-arg name="headers">
      <map>
        <entry key="${versionHeader.name}" value="${versionHeader.value}" />
      </map>
    </constructor-arg>
    <constructor-arg name="referenceDataProviders" ref="vtk.globalHeaders.referenceDataProviders" />
    <constructor-arg name="order" value="0" />
    <constructor-arg name="addHeaders" value="false" />
  </bean>

  <bean parent="defaultResponseFilters.builder">
    <property name="arguments" ref="vtk.globalHeaders.provider" />
  </bean>

  <!-- Builders for header reference data providers: -->
  <bean id="vtk.globalHeaders.referenceDataProviders" class="java.util.ArrayList" />
  <bean id="vtk.globalHeaders.referenceDataProvider" 
        class="org.springframework.beans.factory.config.MethodInvokingBean"
        abstract="true">
    <property name="targetObject" ref="vtk.globalHeaders.referenceDataProviders" />
    <property name="targetMethod" value="add" />
  </bean>

  <bean parent="vtk.globalHeaders.referenceDataProvider">
    <property name="arguments">
      <bean class="vtk.web.referencedata.provider.FrameworkVersionProvider" />
    </property>
  </bean>

  <bean id="services" class="vtk.beans.factory.BeansListingFactoryBean">
    <property name="targetBeansClass" value="vtk.web.service.Service" />
  </bean>
  
  <bean id="indexFileResolver" class="vtk.web.IndexFileResolver">
    <property name="indexFilePropDef" ref="collection.indexFilePropDef" />
  </bean>
  
  <bean id="spCookieAuthHandlers" class="vtk.util.SortedCollection">
    <constructor-arg>
      <bean class="org.springframework.core.OrderComparator" />
    </constructor-arg>
    <constructor-arg name="unique" value="true" />
  </bean>

  <bean id="spCookieAuthHandlers.builder"
        class="org.springframework.beans.factory.config.MethodInvokingBean" abstract="true">
    <property name="targetObject" ref="spCookieAuthHandlers" />
    <property name="targetMethod" value="add" />
  </bean>

  <bean id="securityInitializer" class="vtk.security.web.SecurityInitializer">
    <description> This bean initializes the security context for each request.
      The security context contains the authenticated principal and the
      repository token. </description>
    <property name="tokenManager" ref="tokenManager" />
    <property name="authenticationHandlerRegistry" ref="vtk.authenticationHandlerRegistry" />
    <property name="principalFactory" ref="principalFactory" />
    <property name="cookieLinkStore" ref="cookieLinkStore" />
    <property name="cookieLinksEnabled" value="${security.sessionCookieLinksEnabled}" />
    <property name="rememberAuthMethod" value="${security.rememberAuthMethod}" />
    <property name="spCookieDomain" value="${security.spCookieDomain}" />
    <property name="spCookieAssertion" ref="securityInitializer.spCookieAssertion" />
    <property name="spCookieHandlers" ref="spCookieAuthHandlers" />
    <property name="vrtxAuthSP" value="${saml.vrtxAuthSP}" />
    <property name="uioAuthIDP" value="${saml.uioAuthIDP}" />
    <property name="uioAuthSSO" value="${saml.uioAuthSSO}" />
  </bean>

  <bean id="securityInitializer.spCookieAssertion" class="vtk.web.service.AndAssertion">
    <property name="assertions">
      <list>
        <bean class="vtk.web.service.InvertAssertion">
          <property name="assertion">
            <ref bean="webdavHostNameAssertion" />
          </property>
        </bean>
        <bean class="vtk.web.service.InvertAssertion">
          <property name="assertion">
            <bean class="vtk.web.service.ConfigAssertion">
              <property name="config" value="${webdavHostName}" />
              <property name="expectedValue" value="${webHostName}" />
            </bean>
          </property>
        </bean>
      </list>
    </property>
  </bean>

  <bean id="cookieLinkStore" class="vtk.security.CookieLinkStore">
    <property name="cache" ref="cookieLinkStore.cache" />
  </bean>
  <bean id="cookieLinkStore.cache" class="vtk.util.cache.SimpleCacheImpl">
    <property name="timeoutSeconds" value="3600" />
  </bean>
  
  <!-- Spring session filter (works only with spring boot) -->
  <!--bean id="springSessionRepositoryFilter" class="vtk.web.servlet.NullFilter" /-->
  <bean id="springSessionRepositoryFilter" 
        class="vtk.web.servlet.SessionRepositoryFilter">
    <constructor-arg name="sessionRepository" ref="spring.sessionRepository" />
    <property name="sessionStrategy">
      <bean class="vtk.web.servlet.CookieHttpSessionStrategy">
        <constructor-arg name="cookieNameHttp" value="${session.cookieName.http}" />
        <constructor-arg name="cookieNameHttps" value="${session.cookieName.https}" />
      </bean>
    </property>
  </bean>

  <bean id="spring.sessionRepository" 
        class="org.springframework.session.MapSessionRepository">
    <constructor-arg name="sessions" ref="spring.sessionRepository.sessionMap" />
    <property name="defaultMaxInactiveInterval" value="1800" />
  </bean>
  <bean id="spring.sessionRepository.sessionMap" class="java.util.concurrent.ConcurrentHashMap" />

  <bean id="defaultRequestFilters" class="vtk.util.SortedCollection">
    <constructor-arg>
      <bean class="org.springframework.core.OrderComparator" />
    </constructor-arg>
    <constructor-arg name="unique" value="true" />
  </bean>

  <bean id="defaultRequestFilters.builder"
        class="org.springframework.beans.factory.config.MethodInvokingBean" abstract="true">
    <property name="targetObject" ref="defaultRequestFilters" />
    <property name="targetMethod" value="add" />
  </bean>

  <bean id="defaultResponseFilters" class="vtk.util.SortedCollection">
    <constructor-arg>
      <bean class="org.springframework.core.OrderComparator" />
    </constructor-arg>
    <constructor-arg name="unique" value="true" />
  </bean>

  <bean id="defaultResponseFilters.builder"
        class="org.springframework.beans.factory.config.MethodInvokingBean" abstract="true">
    <property name="targetObject" ref="defaultResponseFilters" />
    <property name="targetMethod" value="add" />
  </bean>

  <bean id="repositoryContextInitializer" class="vtk.web.RepositoryContextInitializer" />

  <!-- HandlerMapping -->
  <bean id="serviceMapping" class="vtk.web.service.ServiceHandlerMapping">
    <description> The service handler mapping must be set in order for the
      service framework to function. </description>
  </bean>

  <!-- Method level annotation of controllers (e.g. @RequestMapping(method = RequestMethod.GET)) -->
  <!--bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/-->

  <!-- Type level annotation is not included as we have the ServiceHandlerMapping: -->
  <!--bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/-->

  <!-- Custom and required Spring HandlerAdapter instances defined here. -->
  <!-- Note that defining even a single instance of a custom HandlerAdapter in will cause
       Spring to disregard its default set of handler adapters, and thus all required
       handler-adapters must be defined here. The Spring (2.5.x) default adapters are:
        - org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter
        - org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter
        - org.springframework.web.servlet.mvc.throwaway.ThrowawayControllerHandlerAdapter
        - org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter

       Source: org/springframework/web/servlet/DispatcherServlet.properties -->

  <!-- Custom handlerAdapter for all Controller instances: -->
  <bean class="vtk.web.filter.ServiceHandlerFilterAdapter" />

  <!-- Spring HandlerAdapter for all HttpRequestHandler instances: -->
  <bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter" />
  
  
</beans>
