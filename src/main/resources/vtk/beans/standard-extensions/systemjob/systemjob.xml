<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

  <!-- Periodic system jobs -->

  <!-- Abstract base bean for repository jobs -->
  <bean id="repository.systemjob" abstract="true" parent="repositoryAware">
    <property name="securityContext">
      <bean class="vtk.security.SecurityContext">
        <constructor-arg ref="writeAllToken" />
        <constructor-arg ref="rootPrincipal" />
      </bean>
    </property>
    <property name="systemJobStatusPropDef" ref="systemJobStatusPropDef" />
    <property name="resourceTypeTree" ref="resourceTypeTree" />
  </bean>

  <!-- Abstract base bean for index-based repository job path selectors -->
  <bean id="repository.systemjob.indexPathSelector" abstract="true">
    <property name="searcher" ref="systemIndexSearcher" />
    <property name="parser" ref="queryParserFactory" />
    <property name="queryProcessor" ref="queryStringPreProcessor" />
    <property name="sortingParser" ref="sortingParserFactory" />
    <property name="resourceTypeTree" ref="resourceTypeTree" />
  </bean>

  <!-- Image metadata, including thumbnail -->
  <bean id="repository.systemjob.imageMetadataJob" class="vtk.repository.systemjob.ImageMetadataJob" parent="repository.systemjob" depends-on="resourceTypeTree">
    <property name="triggerExpression" value="${repository.media.generator.interval}" />
    <property name="id" value="image-metadata-generator" />
    <property name="pathSelector">
      <bean class="vtk.repository.systemjob.IndexQueryPathSelector" parent="repository.systemjob.indexPathSelector">
        <property name="limit" value="${repository.media.generator.batch}" />
        <property name="queryString">
          <value>
            type IN image AND media-metadata-status = GENERATE
          </value>
        </property>
      </bean>
    </property>
    <property name="affectedPropertyNames">
      <list>
        <value>thumbnail</value>
        <value>pixelHeight</value>
        <value>pixelWidth</value>
        <value>media-metadata-status</value>
      </list>
    </property>
    
    <property name="width" value="${resourcetype.image.thumbnail.width}" />
    <property name="maxSourceImageFileSize" value="${resourcetype.image.thumbnail.maxSourceImageFileSize}" />
    <property name="maxSourceImageRawMemoryUsage" value="${resourcetype.image.thumbnail.maxSourceImageRawMemoryUsage}" />
    <property name="supportedFormats">
      <set>
        <value>jpeg</value>
        <value>jpg</value>
        <value>gif</value>
        <value>png</value>
        <value>bmp</value>
        <value>pjpeg</value><!-- Microsoft -->
      </set>
    </property>
    <property name="mediaMetadataStatusPropDef" ref="mediaMetadataStatusPropDef" />
    <property name="thumbnailPropDef" ref="thumbnailPropDef" />
    <property name="imageHeightPropDef" ref="mediaHeightPropDef" />
    <property name="imageWidthPropDef" ref="mediaWidthPropDef" />
  </bean>
  <bean parent="cluster.componentRegistration">
    <property name="component" ref="repository.systemjob.imageMetadataJob"/>
    <property name="async" value="false" /><!-- No need for async, only records role changes without any blocking. -->
  </bean>



  <!-- Resource publisher periodic job -->
  <bean id="repository.systemjob.publisher" class="vtk.repository.systemjob.StoreResourceJob" parent="repository.systemjob">
    <property name="triggerExpression" value="${repository.publisher.interval}" />
    <property name="id" value="published-status" />
    <property name="pathSelector">
      <bean class="vtk.repository.systemjob.IndexQueryPathSelector" parent="repository.systemjob.indexPathSelector">
        <property name="queryString">
          <value>
               (published = false AND publish-date &lt; {$currentTime}
                     AND (unpublish-date !exists OR unpublish-date &gt; {$currentTime}))
                 OR
               (published = true AND unpublish-date &lt; {$currentTime})
          </value>
        </property>
      </bean>
    </property>
    <property name="affectedPropertyNames">
      <list>
        <value>published</value>
      </list>
    </property>
  </bean>
  <bean parent="cluster.componentRegistration">
    <property name="component" ref="repository.systemjob.publisher"/>
    <property name="async" value="false" /><!-- No need for async, only records role changes without any blocking. -->
  </bean>


  <!-- Link check job for resources that link to recently published, moved or deleted resources -->
  <bean id="repository.systemjob.linkcheck.referencingResources" 
        class="vtk.repository.systemjob.LinkCheckJob" parent="repository.systemjob">
    <property name="triggerExpression" value="${systemjob.linkcheck.recent.trigger}" />
    <property name="enabled" value="${systemjob.linkcheck.recent.enabled}" />
    <property name="allowCachedResults" value="false" />
    <property name="id" value="linkcheck-referencing" />
    <property name="hrefsPropDef" ref="hrefsPropDef" />
    <property name="unpublishedCollectionPropDef" ref="unpublishedCollectionPropDef" />
    <property name="linkCheckPropDef" ref="linkCheckPropDef" />
    <property name="linkChecker" ref="linkCheck.validator" />
    <property name="useRepositoryLocks" value="${systemjob.linkcheck.locking}" />
    <property name="updateBatch" value="${systemjob.linkcheck.batch}" />
    <property name="minRecheckSeconds" value="-1" />
    <property name="canonicalUrlConstructor" ref="canonicalUrlConstructor" />
    <property name="affectedPropertyNames">
      <list>
        <value>resource::hrefs</value>
        <value>resource::link-check</value>
        <value>resource::broken-links-count</value>
        <value>resource::link-status</value>
      </list>
    </property>
    <property name="pathSelector">
      <bean class="vtk.repository.systemjob.ChangedUriReferencesPathSelector">
        <constructor-arg name="hrefsPropDef" ref="hrefsPropDef" />
        <constructor-arg name="searcher" ref="systemIndexSearcher" />
      </bean>
    </property>
  </bean>
  <bean parent="cluster.componentRegistration">
    <property name="component" ref="repository.systemjob.linkcheck.referencingResources"/>
    <property name="async" value="false" /><!-- No need for async, only records role changes without any blocking. -->
  </bean>


  <!-- Link check job for recently modified resources -->
  <bean id="repository.systemjob.linkcheck.recent" 
        class="vtk.repository.systemjob.LinkCheckJob" parent="repository.systemjob">
    <property name="triggerExpression" value="${systemjob.linkcheck.recent.trigger}" />
    <property name="enabled" value="${systemjob.linkcheck.recent.enabled}" />
    <property name="id" value="linkcheck-recent" />
    <property name="hrefsPropDef" ref="hrefsPropDef" />
    <property name="unpublishedCollectionPropDef" ref="unpublishedCollectionPropDef" />
    <property name="linkCheckPropDef" ref="linkCheckPropDef" />
    <property name="linkChecker" ref="linkCheck.validator" />
    <property name="useRepositoryLocks" value="${systemjob.linkcheck.locking}" />
    <property name="updateBatch" value="${systemjob.linkcheck.batch}" />
    <property name="minRecheckSeconds" value="${systemjob.linkcheck.minRecheckSeconds}" />
    <!--property name="minRecheckSeconds" value="-1" /-->
    <property name="canonicalUrlConstructor" ref="canonicalUrlConstructor" />
    <property name="affectedPropertyNames">
      <list>
        <value>resource::hrefs</value>
        <value>resource::link-check</value>
        <value>resource::broken-links-count</value>
        <value>resource::link-status</value>
      </list>
    </property>
    <property name="pathSelector">
      <bean class="vtk.repository.systemjob.IndexQueryPathSelector" 
            parent="repository.systemjob.indexPathSelector">
        <property name="queryString">
          <value>
            ${systemjob.linkcheck.queryFilterExpression}
            AND
            link-status = AWAITING_LINKCHECK
          </value>
        </property>
        <property name="sortString">
          <value>lastModified ASC</value>
        </property>
        <property name="limit" value="${systemjob.linkcheck.batch}" />
        <property name="waitForPendingUpdates" value="true" />
      </bean>
    </property>
  </bean>
  <bean parent="cluster.componentRegistration">
    <property name="component" ref="repository.systemjob.linkcheck.recent"/>
    <property name="async" value="false" /><!-- No need for async, only records role changes without any blocking. -->
  </bean>

  <!-- Broken link check job (regular intervals) -->

  <bean id="repository.systemjob.linkcheck" class="vtk.repository.systemjob.LinkCheckJob" parent="repository.systemjob">
    <property name="triggerExpression" value="${systemjob.linkcheck.trigger}" />
    <property name="enabled" value="${systemjob.linkcheck.enabled}" />
    <property name="id" value="linkcheck" />

    <property name="hrefsPropDef" ref="hrefsPropDef" />
    <property name="unpublishedCollectionPropDef" ref="unpublishedCollectionPropDef" />
    <property name="linkCheckPropDef" ref="linkCheckPropDef" />
    <property name="linkChecker" ref="linkCheck.validator" />
    <property name="useRepositoryLocks" value="${systemjob.linkcheck.locking}" />
    <property name="updateBatch" value="${systemjob.linkcheck.batch}" />
    <property name="minRecheckSeconds" value="${systemjob.linkcheck.minRecheckSeconds}" />
    <property name="canonicalUrlConstructor" ref="canonicalUrlConstructor" />

    <property name="affectedPropertyNames">
      <list>
        <value>resource::hrefs</value>
        <value>resource::link-check</value>
        <value>resource::broken-links-count</value>
        <value>resource::link-status</value>
      </list>
    </property>
    <property name="pathSelector">
      <bean class="vtk.repository.systemjob.AggregatingPathSelector">
        <constructor-arg>
          <list>
            <bean class="vtk.repository.systemjob.IndexQueryPathSelector" parent="repository.systemjob.indexPathSelector">
              <property name="queryString">
                <value>
                  ${systemjob.linkcheck.queryFilterExpression}
                  AND
                  link-status != NO_LINKS
                </value>
              </property>
              <property name="sortString">
                <value>system-job-status@linkcheck ASC</value>
              </property>
              <property name="limit" value="${systemjob.linkcheck.batch}" />
            </bean>
          </list>
        </constructor-arg>
      </bean>
    </property>
  </bean>
  <bean parent="cluster.componentRegistration">
    <property name="component" ref="repository.systemjob.linkcheck"/>
    <property name="async" value="false" /><!-- No need for async, only records role changes without any blocking. -->
  </bean>


  <bean id="repository.systemjob.linkrepair" 
        class="vtk.repository.systemjob.LinkRepairJob" parent="repository.systemjob">
    <constructor-arg ref="structuredResources.resourceManager" />
    <constructor-arg ref="hrefsPropDef" />
    <constructor-arg ref="canonicalUrlConstructor" />
    <property name="securityContext">
      <bean class="vtk.security.SecurityContext">
        <constructor-arg ref="systemjob.linkRepairPrincipal.token" />
        <constructor-arg ref="systemjob.linkRepairPrincipal" />
      </bean>
    </property>
    <property name="triggerExpression" value="${systemjob.linkrepair.trigger}" />
    <property name="enabled" value="${systemjob.linkrepair.enabled}" />
    <property name="id" value="linkrepair" />
    <property name="affectedPropertyNames">
      <list>
        <value>resource::hrefs</value>
        <value>resource::link-check</value>
      </list>
    </property>
    <property name="affectedPropertyTypes">
      <list>
        <value>IMAGE_REF</value>
        <value>HTML</value>
      </list>
    </property>
    <property name="pathSelector">
      <bean class="vtk.repository.systemjob.IndexQueryPathSelector" 
            parent="repository.systemjob.indexPathSelector">
        <property name="queryString" value="linkRepairEnabled=true AND link-check@relocatedLinks.vrtxid exists" />
        <property name="sortString" value="system-job-status@linkrepair ASC" />
        <property name="limit" value="${systemjob.linkcheck.batch}" />
        <property name="waitForPendingUpdates" value="true" />
      </bean>
    </property>
  </bean>
  <bean parent="cluster.componentRegistration">
    <property name="component" ref="repository.systemjob.linkrepair"/>
    <property name="async" value="false" />
  </bean>

  <!-- Special principals and tokens -->
  <bean id="systemjob.linkRepairPrincipal" class="vtk.security.PrincipalImpl">
    <constructor-arg value="${systemjob.linkrepair.principal}" />
    <constructor-arg value="USER" />
  </bean>

  <bean id="systemjob.linkRepairPrincipal.token" lazy-init="true" 
        class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
    <property name="targetObject" ref="tokenManager" />
    <property name="targetMethod" value="getRegisteredToken" />
    <property name="arguments">
      <list>
        <ref bean="systemjob.linkRepairPrincipal" />
      </list>
    </property>
  </bean>

</beans>
