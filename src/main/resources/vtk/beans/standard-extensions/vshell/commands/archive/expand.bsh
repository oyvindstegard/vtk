
getDescription() {
    return "Expands a JAR archive";
}

getUsage() {
    return "archive expand <file:string> <uri:path>";
}


void execute(context, args, out) {
    repo = context.get("context").getBean("repository");
    token = context.get("context").getBean("writeAllToken");
    archiver = context.get("context").getBean("repository.archiver");
    
    file = args.get("file");
    uri = args.get("uri");

    listener = new vtk.util.repository.ResourceArchiver.EventListener() {
        archived(vtk.repository.Path uri) {
           out.println("add: " + uri);
        }
        expanded(vtk.repository.Path uri) {
            out.println("exp: " + uri);
        }
        warn(vtk.repository.Path uri, String msg) {
            out.println("warn: " + uri + ": " + msg);
        }
    };

    if (!new java.io.File(file).exists()) {
        out.println("No such file: " + file);
        return;
    }

    try {
        stream = new java.io.FileInputStream(file);
    } catch (e) {
        out.println("Unable to open archive file: " + file
                    + ": " + e.getMessage());
        return;
    }

    props = new HashMap();
    // props.put("ignored", new ArrayList());

    try {
        archiver.expandArchive(token, stream, uri, props, listener);
    } catch (e) {
        out.println("Unable to expand archive: " + file
                    + ": " + e.getMessage());
        return;
    }
}

