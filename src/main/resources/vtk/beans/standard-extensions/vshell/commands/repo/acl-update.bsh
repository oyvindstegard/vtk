getDescription() {
    return "Grants or revokes permissions on a resource";
}

getUsage() {
    return "repo acl update <uri:path> <operation:string> <permission:string> <principals:string...>";
}

void execute(context, args, out) {

    repo = context.get("context").getBean("repository");
    token = context.get("context").getBean("writeAllToken");
    principalFactory = context.get("context").getBean("principalFactory");

    operation = args.get("operation");

    if (!("grant".equals(operation) || "revoke".equals(operation))) {
        out.println("Valid operations are 'grant' or 'revoke'");
        return;
    }

    perm = args.get("permission");
    uri = args.get("uri");
    principalList = args.get("principals");

    if (!repo.exists(token, uri)) {
        out.println("No such resource");
        return;
    }

    r = repo.retrieve(token, uri, true);

    principals = args.get("principals");

    newPrincipals = new ArrayList();
    for (p: principals) {
        if (p.startsWith("g:")) {

            newPrincipals.add(principalFactory.getPrincipal(
                           p.substring(2), vtk.security.Principal.Type.GROUP));
        } else if (p.startsWith("pseudo:")) {
            newPrincipals.add(principalFactory.getPseudoPrincipal(p));
        } else {
            newPrincipals.add(principalFactory.getPrincipal(
                          p, vtk.security.Principal.Type.USER));
        }
    }

    action = vtk.repository.Privilege.forName(perm);
    

    try {

        acl = r.getAcl();

        for (p: newPrincipals) {
            if ("grant".equals(operation)) {
                acl = acl.addEntry(action, p);
            } else {
                acl = acl.removeEntry(action, p);
            }
        }

        r = repo.storeACL(token, r.getURI(), acl);
        out.println("Stored ACL on " + r.getURI() + ": " + r.getAcl());
    } catch (e) {
        out.println("Error: " + e.getMessage());
    }
}
