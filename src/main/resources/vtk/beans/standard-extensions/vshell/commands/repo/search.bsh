import vtk.repository.search.*;

getDescription() {
    return "Searches the repository";
}


getUsage() {
    return "repo search [-limit:number] [-sort:string] <query:string> [-properties:string...]";
}

void execute(context, args, out) {

    repo = context.get("context").getBean("repository");
    token = context.get("context").getBean("writeAllToken");
    indexSearcher = context.get("context").getBean("systemIndexSearcher");
    queryParserFactory = context.get("context").getBean("queryParserFactory");
    rtt = context.get("context").getBean("resourceTypeTree");

    queryExp = args.get("query");

    limit = args.get("limit");
    sortArg = args.get("sort");
    directionArg = args.get("direction");

    parser = queryParserFactory.getParser();
    query = null;
    try {
        query = parser.parse(queryExp);
    } 
    catch (t) {
        out.println(t.getMessage());
        return;
    }

    search = new vtk.repository.search.Search();
    search.clearAllFilterFlags();
    search.setPropertySelect(vtk.repository.search.PropertySelect.ALL);
    search.setQuery(query);
    if (limit != null && limit >= 0) {
        search.setLimit(limit);
    }
    if (sortArg != null) {
        sorting = new Sorting();
        direction = null;
        if (sortArg.trim().contains(" ")) {
            dir = sortArg.substring(sortArg.indexOf(" ") + 1);
            sortArg = sortArg.substring(0, sortArg.length() - dir.length() - 1);
            direction = "asc".equals(dir) ? SortFieldDirection.ASC : SortFieldDirection.DESC;
        }

        sf = null;
        if ("type".equals(sortArg) || "name".equals(sortArg) || "uri".equals(sortArg)) {
            if (direction != null) {
                sf = new TypedSortField(sortArg, direction);
            } else {
                sf = new TypedSortField(sortArg);
            }
        } 
        else {
            prefix = null;
            name = null;
            if (sortArg.contains(":")) {
                prefix = sortArg.substring(0, sortArg.indexOf(":"));
                name = sortArg.substring(prefix.length() + 1);
            } else {
                prefix = null;
                name = sortArg;
            }
            propDef = rtt.getPropertyDefinitionByPrefix(prefix, name);
            if (propDef != null) {
                if (direction != null) {
                    sf = new PropertySortField(propDef, direction);
                } else {
                    sf = new PropertySortField(propDef);
                }
            }
        }
        if (sf != null) {
            sorting.addSortField(sf);
            search.setSorting(sorting);
        }
    }


    rs = indexSearcher.execute(token, search);

    propList = args.get("properties");
    wildcard = propList != null && propList.contains("*");

    for (i=0; i<rs.getSize(); i++) {
        r = rs.getResult(i);
        out.println(r.getURI());
        if (propList != null) {
            if (wildcard) {
                for (prop: r.getProperties()) {
                    printProp(prop, null, out);
                }
                acl = rs.getAcl(i);
                if (acl != null) {
                    printAcl(acl, rs.isInheritedAcl(i), out);
                }
            } 
            else {
                for (propName: propList) {
                    if ("acl".equals(propName)) {
                        acl = rs.getAcl(i);
                        if (acl != null) {
                            printAcl(acl, rs.isInheritedAcl(i), out);
                        }
                    } 
                    else {
                        field = null;
                        if (propName.contains("@")) {
                            field = propName.substring(propName.indexOf("@") + 1);
                            propName = propName.substring(0, propName.indexOf("@"));
                        }
                        p = propName;
                        prefix = null;

                        if (p.contains(":")) {
                            prefix = p.substring(0, p.indexOf(":"));
                            p = p.substring(prefix.length() + 1);
                        }
                        prop = r.getPropertyByPrefix(prefix, p);
                        if (prop == null) continue;
                        printProp(prop, field, out);
                    }
                }
            }
        }
    }
    out.println();
    out.println("[Total results fetched: " + rs.getSize() + ", total hits: " + rs.getTotalHits() + "]");
}

void printProp(prop, field, out) {
    if (prop.getType() == vtk.repository.resourcetype.PropertyType.Type.BINARY) {
        out.println("  " + prop.getDefinition().getName() + ": [binary]");
    }
    else {
        Object value;
        if (prop.getDefinition().isMultiple()) {
            value = new ArrayList();
            for (v: prop.getValues()) {
                value.add(format(prop, v, field));
            }
        }
        else {
            value = format(prop, prop.getValue(), field);
        }
        if (field != null) {
            out.println("  " + prop.getDefinition().getName() + "@" + field + ": " + value);
        }
        else {
            out.println("  " + prop.getDefinition().getName() + ": " + value);
        } 
    }
}

Object format(prop, value, field) {
    if (field != null && prop.getType() == vtk.repository.resourcetype.PropertyType.Type.JSON) {
        return vtk.util.text.Json.select(value.getJSONValue(), field);
    }
    return value;
}

void printAcl(acl, inherited, out) {
  out.println("  " + acl.toString() + (inherited ? " (inherited)" : " (set on this resource)"));
}
