import vtk.repository.*;
import vtk.repository.resourcetype.*;
import java.util.ArrayList;

getDescription() {
    return "Store an inheritable property on a resource";
}

getUsage() {
    return "repo iprop <command:string> <uri:path> <prop:string> [values:string...]";
}

void execute(context, args, out) {

    repo = context.get("context").getBean("repository");
    token = context.get("context").getBean("writeAllToken");
    typeTree = context.get("context").getBean("resourceTypeTree");

    command = args.get("command");
    uri = args.get("uri");

    if (!repo.exists(token, uri)) {
        out.println("No such resource");
        return;
    }

    prop = args.get("prop");
    prefix = null;
    if (prop.contains(":")) {
        prefix = prop.substring(0, prop.indexOf(":"));
        prop = prop.substring(prefix.length() + 1);
    }
    propDef = typeTree.getPropertyDefinitionByPrefix(prefix, prop);
    if (propDef == null) {
        out.println("Definition for property " + prefix + ":" + prop + " not found.");
        return;
    }
    if (!propDef.isInheritable()) {
        out.println("Not an inheritable property: " + propDef);
        return;
    }

    r = repo.retrieve(token, uri, false);

    if ("store".equals(command)) {
        valueargs = args.get("values");
        if (valueargs == null || valueargs.size() == 0) {
            out.println("Must provide at least one property value when storing");
            return;
        }

        property = propDef.createProperty();
        if (propDef.isMultiple()) {
           vtk.repository.resourcetype.Value[] vals =
                   new vtk.repository.resourcetype.Value[valueargs.size()];
           for (int i=0; i<valueargs.size(); i++) {
               vals[i] = new vtk.repository.resourcetype.Value((String)valueargs.get(i), vtk.repository.resourcetype.PropertyType.Type.STRING);
           }
           property.setValues(vals);
        }
        else {
            // Support BOOLEAN and STRING for now:
            if (propDef.getType() == PropertyType.Type.BOOLEAN) {
                property.setBooleanValue(Boolean.valueOf((String)valueargs.get(0)));
            }
            else {
                property.setStringValue((String)valueargs.get(0));
            }
        }
        r.addProperty(property);
    }
    else if ("del".equals(command) || "delete".equals(command)) {
        r.removeProperty(propDef);
    }
    else {
        out.println("Must provide command: 'store' or 'delete'");
        return;
    }

    inheritableProps = new ArrayList();
    inheritableProps.add(propDef);
    storeContext = new InheritablePropertiesStoreContext(inheritableProps);
    repo.store(token, r, storeContext);
}
