
getDescription() {
    return "Creates a JAR archive";
}

getUsage() {
    return "archive create [-pipe:boolean] [-file:string] <uri:path>";
}


void execute(context, args, out) {
    repo = context.get("context").getBean("repository");
    token = context.get("context").getBean("writeAllToken");
    archiver = context.get("context").getBean("repository.archiver");
    
    file = args.get("file");
    pipe = "true".equals(args.get("pipe"));
    uri = args.get("uri");


    listener = new vtk.util.repository.ResourceArchiver.EventListener() {
        archived(vtk.repository.Path uri) {
            if (!pipe) {
                out.println("add: " + uri);
            }
        }
        expanded(vtk.repository.Path uri) {
            if (!pipe) {
                out.println("exp: " + uri);
            }
        }
        warn(vtk.repository.Path uri, String msg) {
            if (!pipe) {
                out.println("warn: " + uri + ": " + msg);
            }
        }
    };

    stream = out;
    if (!pipe) {
        try {
            stream = new java.io.FileOutputStream(file);
        } 
        catch (e) {
            out.println("Unable to create destination file: " + file
                        + ": " + e.getMessage());
            return;
        }
    }

    if (!repo.exists(token, uri)) {
        out.println("No such file or directory: " + uri);
        return;
    }

    resource = repo.retrieve(token, uri, true);
    if (!resource.isCollection()) {
        out.println("Resource " + uri + " is not a collection");
        return;
    }

    props = new HashMap();
    // props.put("ignored", new ArrayList());
    try {
        archiver.createArchive(token, resource, stream, props, listener);
    }
    catch (e) {
        out.println("Unable to create archive: "
                    + file + ": " + e.getMessage());
    }
}
