/* Copyright (c) 2004, University of Oslo, Norway
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 *  * Neither the name of the University of Oslo nor the names of its
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission.
 *      
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.vortikal.web.view;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.vortikal.web.servlet.BufferedResponseWrapper;



/**
 * This view takes a wrapped view and applies the output from that
 * view on a list of (textual) {@link TextContentFilter content
 * filters}. Main application areas include merging common components
 * like menus, breadcrumb trails, etc. into the HTML generated by
 * other views.
 * 
 * @see TextContentFilter
 */
public class FilteringViewWrapper extends AbstractViewWrapper {

    private Log logger = LogFactory.getLog(this.getClass());

    private TextContentFilter[] contentFilters;


    
    public void setContentFilters(TextContentFilter[] contentFilters) {
        this.contentFilters = contentFilters;
    }
    

    public void preRender(Map model, HttpServletRequest request,
                          BufferedResponseWrapper bufferedResponse) throws Exception {
    }


    public void postRender(Map model, HttpServletRequest request,
                           BufferedResponseWrapper bufferedResponse) throws Exception {

        String content = new String(bufferedResponse.getContentBuffer(), 
                bufferedResponse.getCharacterEncoding());
        
        if (contentFilters != null) {
            for (int i = 0; i < contentFilters.length; i++) {
                content = contentFilters[i].process(model, request, content);
                if (logger.isDebugEnabled()) {
                    logger.debug("Ran content filter " + contentFilters[i]
                                 + ", content length after = " + content.length());
                }
            }
        }
        writeResponse(content.getBytes("utf-8"), bufferedResponse, "text/html;charset=\"utf-8\"");
    }
    
    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append(this.getClass().getName()).append(": [");
        sb.append("wrappedView = ").append(this.getWrappedView());
        sb.append(", contentFilters = ").append(java.util.Arrays.asList(this.contentFilters));
        sb.append("]");
        return sb.toString();
    }
    

}
