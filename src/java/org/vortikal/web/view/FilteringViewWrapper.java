/* Copyright (c) 2004, University of Oslo, Norway
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 *  * Neither the name of the University of Oslo nor the names of its
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission.
 *      
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.vortikal.web.view;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.vortikal.util.text.HtmlUtil;
import org.vortikal.web.servlet.BufferedResponseWrapper;



/**
 * This view takes a wrapped view and applies the output from that
 * view on a list of (textual) {@link TextContentFilter content
 * filters}. Main application areas include merging common components
 * like menus, breadcrumb trails, etc. into the HTML generated by
 * other views.
 *
 * <p>The Content-Type header written to the response is the same as
 * that of the original response, with a possible modification of the
 * <code>charset</code> parameter (see below).
 *

 * <p>Configurable properties (in addition to those defined by the
 *  {@link AbstractViewWrapper superclass}):
 * <ul>
 *   <li><code>contentFilters</code> - an array of {@link
 *   TextContentFilter content filters} to apply to the textual content
 *   that was the result of the wrapped view invocation.
 *   <li><code>guessCharacterEncodingFromContent</code> (boolean) -
 *   whether to check (HTML) body contents for character encoding, if
 *   it was not specified by the <code>Content-Type</code> header of
 *   the wrapped view. Default is <code>false</code>.
 *   <li><code>appendCharacterEncodingToContentType</code> (boolean)
 *   - if set to <code>false</code>, no <code>charset</code> parameter
 *   will be added to the <code>Content-Type</code> header set by this
 *   view. Default is <code>true</code>.
 * </ul>
 * 
 * @see TextContentFilter
 */
public class FilteringViewWrapper extends AbstractViewWrapper {

    private TextContentFilter[] contentFilters;
    public boolean guessCharacterEncodingFromContent = false;
    private boolean appendCharacterEncodingToContentType = true;
    
    
    public void setContentFilters(TextContentFilter[] contentFilters) {
        this.contentFilters = contentFilters;
    }
    
    public void setGuessCharacterEncodingFromContent(
        boolean guessCharacterEncodingFromContent) {
        this.guessCharacterEncodingFromContent = guessCharacterEncodingFromContent;
    }
    
    public void setAppendCharacterEncodingToContentType(
        boolean appendCharacterEncodingToContentType) {
        this.appendCharacterEncodingToContentType = appendCharacterEncodingToContentType;
    }
    

    public void preRender(Map model, HttpServletRequest request,
                          BufferedResponseWrapper bufferedResponse) throws Exception {
    }


    public void postRender(Map model, HttpServletRequest request,
                           BufferedResponseWrapper bufferedResponse) throws Exception {

        if (logger.isDebugEnabled()) {
            logger.debug("About to process buffered content, content type: "
                         + bufferedResponse.getContentType()
                         + ", character encoding: " +
                         bufferedResponse.getCharacterEncoding());
        }

        byte[] contentBuffer = bufferedResponse.getContentBuffer();
        

        String characterEncoding = null;
        String contentType = bufferedResponse.getContentType().trim();
        if (contentType.indexOf("charset") != -1 && contentType.indexOf(";") != -1) {
            contentType = contentType.substring(0, contentType.indexOf(";"));
            characterEncoding = bufferedResponse.getCharacterEncoding();
        } else if (this.guessCharacterEncodingFromContent) {
            characterEncoding = HtmlUtil.getCharacterEncodingFromBody(contentBuffer);
        }

        if (characterEncoding == null) {
            characterEncoding = bufferedResponse.getCharacterEncoding();
        }

        if (logger.isDebugEnabled()) {
            logger.debug("Reading buffered content using character encoding "
                         + characterEncoding);
        }

        String content = new String(contentBuffer, characterEncoding);

        if (contentFilters != null) {
            for (int i = 0; i < contentFilters.length; i++) {
                content = contentFilters[i].process(model, request, content);
                if (logger.isDebugEnabled()) {
                    logger.debug("Ran content filter " + contentFilters[i]
                                 + ", content length after = " + content.length());
                }
            }
        }

        if (this.appendCharacterEncodingToContentType &&
            (contentType.startsWith("text/") || contentType.startsWith("application/xml"))) {

            contentType = contentType + ";charset=" + characterEncoding;
        }

        writeResponse(content.getBytes(characterEncoding), bufferedResponse, contentType);
    }
    

    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append(this.getClass().getName()).append(": [");
        sb.append("wrappedView = ").append(this.getWrappedView());
        sb.append(", contentFilters = ").append(java.util.Arrays.asList(this.contentFilters));
        sb.append("]");
        return sb.toString();
    }
    
}
