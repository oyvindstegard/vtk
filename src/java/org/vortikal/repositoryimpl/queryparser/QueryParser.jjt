options {
  MULTI = true;
  STATIC = false;
  //  DEBUG_PARSER = true;
  //  DEBUG_LOOKAHEAD = true;
  //  DEBUG_TOKEN_MANAGER = true;
  // JAVA_UNICODE_ESCAPE = true;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(QueryParser)

package org.vortikal.repositoryimpl.queryparser;

import java.io.StringReader;

/**
* Partial implementation of a query parser based on javacc.
* <p>Try the parser out with:
* <p>java -cp target/classes org.vortikal.repositoryimpl.queryparser.QueryParser "((pre:post=c AND s:s=s) OR ff=2211)"
*/
public class QueryParser implements Parser {

    public QueryParser() {
        this(new StringReader(""));
    }

    public static void main(String args[]) throws ParseException {
        if (args.length == 0) {
            System.out.println("Usage: java org.vortikal.repositoryimpl.queryparser.QueryParser <input>");
            System.exit(0);
        }
        QueryParser parser = new QueryParser(new StringReader(args[0]));
        SimpleNode q = parser.Query();
        System.out.println(args[0]);
        q.dump("");
    }

    private String unescape(String escaped) {
        char[] caSource = escaped.toCharArray();
        char[] caDest = new char[caSource.length];
        int j = 0;
        for (int i = 0; i < caSource.length; i++) {
            if ((caSource[i] != '\\') || (i > 0 && caSource[i-1] == '\\')) {
                caDest[j++]=caSource[i];
            }
        }
        return new String(caDest, 0, j);
    }

    public QueryNode parse(String query) {
        ReInit(new StringReader(query));
        try {
            return Query();
        } catch (TokenMgrError tme) {
            throw new RuntimeException(tme.getMessage());
        } catch (ParseException e) {
            throw new RuntimeException(e.getMessage(), e);
        }
    }

}

PARSER_END(QueryParser)

SKIP : {" "}

TOKEN : { < LP: "("> }
TOKEN : { < RP: ")"> }

TOKEN : { <#ESCAPED_CHAR: "\\" [" ", "\\", "!", "(", ")", ":", "\"", "|", "&", "=", "<", ">" ] > }
TOKEN : { < EQ: "="> }
TOKEN : { < GT: ">"> }
TOKEN : { < LT: "<"> }
TOKEN : { < NE: "!="> }
TOKEN : { < GTE: ">="> }
TOKEN : { < LTE: "<="> }

TOKEN : { < EXISTS: "exists"> }
TOKEN : { < NOTEXISTS: "not exists" | "!exists"> }

TOKEN : { < AND: "AND" | "&&"> }
TOKEN : { < OR: "OR" | "||"> }
TOKEN : { < COLON: ":"> }

TOKEN : { < URI: "uri"> }
TOKEN : { < NAME: "name"> }
TOKEN : { < TYPE: "type"> }

TOKEN : { < #ID: (~[" ", "\\", "\"", "=", "<", ">", "!", "(", ")", ":"])+ > }
TOKEN : { < STRING: (<ID> | <ESCAPED_CHAR>)+ > }

// Don't know how to introduce this yet...
TOKEN : { < #QUOTED: (~["\""])+ > }

// Main method:
SimpleNode Query() : {}
{ 
    QueryChoice()
        { return jjtThis; }
}

void QueryChoice() #void : {}
{
    (
     LOOKAHEAD(100, (Parantheses() | TermQuery()) <AND>) AndQuery() 
     | LOOKAHEAD(100, (ClosedQuery() | TermQuery()) <OR>) OrQuery() 
    | ClosedQuery()
    | TermQuery()
    )    
}

void Parantheses() :
{}
{
    <LP> (Comparator() | <AND> | <OR> | <COLON> | <STRING> | Parantheses())* <RP>
}

void ClosedQuery() #void : {}
{
    <LP> QueryChoice() <RP>
}

void AndQuery() : {}
{
    (ClosedQuery() | TermQuery())
    (<AND> (ClosedQuery() | TermQuery()) )+
}

void OrQuery() : {}
{
    (ClosedQuery() | TermQuery())
    (<OR> (ClosedQuery() | TermQuery()) )+
}

void TermQuery() #void : {}
{ 
    UriQuery() | NameQuery() | TypeQuery() | LOOKAHEAD(4) PropertyExistsQuery() | PropertyValueQuery()
}

// URI query:
void UriQuery() : {}
{ 
    <URI> UriComparator() Value()
}

// Name query:
void NameQuery() : {}
{ 
    <NAME> ComparatorValue()
}

// Type query:
void TypeQuery() : {}
{ 
    <TYPE> ComparatorValue()
}

// Property exists:
void PropertyExistsQuery() : {}
{
    [LOOKAHEAD(2) Prefix() <COLON>] Name() Exists()
}

void Exists() : 
{
    Token t;
}
{
    (t=<EXISTS> | t=<NOTEXISTS>)
    { 
        jjtThis.setValue(t.image); 
    }
}

// Property value query:
void PropertyValueQuery() : {}
{
    [LOOKAHEAD(2) Prefix() <COLON>] Name() ComparatorValue()
}

void ComparatorValue() #void : {}
{
    Comparator() Value()
}

void Prefix() : 
{
    Token t;
}
{
  t=<STRING>
  {
    jjtThis.setValue(t.image);
  }
}

void Name() : 
{
    Token t;
}
{
  t=<STRING>
  {
    jjtThis.setValue(t.image);
  }
}

void Value() : 
{
  Token t;
}
{
    ("\"" t=<STRING> "\"" | t=<STRING>)
  {
      
      jjtThis.setValue(unescape(t.image));
  }
}

// Comparators:
void Comparator() : 
{
    Token t;
}
{
    ( t=<NE> | t=<GTE> | t=<LTE> | t=<EQ> | t=<GT> | t=<LT> )
    { 
        jjtThis.setValue(t.image); 
    }
}

void UriComparator() :
{ 
    Token t;
}
{
    (t=<EQ> | t=<NE>)
    { 
        jjtThis.setValue(t.image); 
    }
}

