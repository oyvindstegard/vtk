<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>
  
  <!-- Repository -->

  <bean id="repository" class="org.vortikal.repositoryimpl.RepositoryImpl">
    <property name="id" value="${repositoryID}" />
    <property name="tokenManager" ref="tokenManager" />
    <property name="roleManager" ref="roleManager" />
    <property name="authorizationManager" ref="authorizationManager" />
    <property name="dao" ref="${repositoryBackend}" />
    <property name="lockManager" ref="lockManager" />
    <property name="propertyManager" ref="propertyManager" />
  </bean>

  <bean id="repository.dataSource" class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close">
    <property name="driverClassName" value="${databaseDriver}" />
    <property name="maxActive" value="${maxDatabaseConnections}" />
    <property name="url" value="${databaseURL}" />
    <property name="username" value="${jdbcUsername}" />
    <property name="password"  value="${jdbcPassword}" />
    <property name="defaultAutoCommit" value="false" />
  </bean>

  <!--
  <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="repository.dataSource"/>
  </bean>
  -->

  <!-- SqlMap setup for iBATIS Database Layer -->
  <bean id="sqlMapClientFactory" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
    <property name="transactionConfigClass"
              value="com.ibatis.sqlmap.engine.transaction.jdbc.JdbcTransactionConfig" />
    <property name="useTransactionAwareDataSource" value="false" />
    <property name="configLocation"
              value="classpath:/org/vortikal/repositoryimpl/dao/ibatis/${sqlDialect}-sql-map-config.xml"/>
    <property name="dataSource" ref="repository.dataSource"/>
  </bean>

  <bean id="repository.database" class="org.vortikal.repositoryimpl.dao.SqlMapDataAccessor">
    <property name="sqlMapClient" ref="sqlMapClientFactory"/>
    <property name="contentStore" ref="repository.contentStore" />
    <property name="propertyManager" ref="propertyManager" />
    <property name="authorizationManager" ref="authorizationManager" />
    <property name="principalManager" ref="principalManager" />
    <property name="sqlMaps" ref="repository.statementMappings" />
    <property name="optimizedAclCopySupported" value="${optimizedAclCopySupported}" />
  </bean>


  <bean id="repository.cache" class="org.vortikal.repositoryimpl.dao.Cache">
    <property name="maxItems" value="${resourceCacheSize}" />
    <property name="wrappedAccessor" ref="repository.database" />
  </bean>


  <!-- Override iBATIS SQL map statement names in this map (should
       generally not be necessary): -->
  <bean id="repository.statementMappings" class="java.util.HashMap">
    <constructor-arg>
      <map>
      </map>
    </constructor-arg>
  </bean>


  <bean id="repository.indexDataAccessor" class="org.vortikal.repositoryimpl.dao.IndexDataAccessorImpl">
    <property name="dataSource" ref="repository.dataSource" />
    <property name="propertyManager" ref="propertyManager" />
    <property name="principalManager" ref="principalManager" />
    <property name="sqlMapClient" ref="sqlMapClientFactory"/>
    <property name="sqlMaps" ref="repository.statementMappings"/>
    
    <!-- Only temporary -->
    <property name="sqlDialect" value="${sqlDialect}"/>

    <!-- How many results to process at a time when authorizing query result sets
        against database -->
    <property name="queryAuthorizationBatchSize" value="1000"/>
  </bean>

  <bean id="repository.contentStore" 
        class="org.vortikal.repositoryimpl.dao.SimpleFileSystemContentStore">
    <property name="urlEncodeFileNames" value="${urlEncodeFileNames}" />
    <property name="repositoryDataDirectory" value="${repositoryDataDirectory}" />
  </bean>

  <bean id="repository.requestLocal" class="org.vortikal.web.RequestLocalRepository">
    <property name="repository" ref="repository"/>
  </bean>

  <bean id="lockManager" class="org.vortikal.repositoryimpl.LockManager">
    <property name="dao" ref="${repositoryBackend}" />
  </bean>

  <bean id="valueFactory" class="org.vortikal.repository.resourcetype.ValueFactoryImpl">
    <property name="principalManager" ref="principalManager"/>
    <property name="dateFormats">
      <list>
        <value>dd.MM.yyyy HH:mm:ss</value>
        <value>dd.MM.yyyy HH:mm</value>
        <value>dd.MM.yyyy</value>
      </list>  
    </property>
  </bean>

  <bean id="propertyManager" class="org.vortikal.repositoryimpl.PropertyManagerImpl">
    <property name="authorizationManager" ref="authorizationManager" />
    <property name="principalManager" ref="principalManager" />
    <property name="roleManager" ref="roleManager" />
    <property name="valueFactory" ref="valueFactory"/>
    <property name="contentStore" ref="repository.contentStore"/>
    <property name="rootResourceTypeDefinition" ref="abstractResourceResourceTypeDefinition"/>
    <property name="contentRepresentationRegistry" ref="contentRepresentationRegistry"/>
  </bean>

  
  <bean id="contentRepresentationRegistry"
        class="org.vortikal.repositoryimpl.content.ContentRepresentationRegistry" />

  <bean id="jdomContentFactory" class="org.vortikal.repositoryimpl.content.JDOMContentFactory" />

  <bean id="jtidyContentFactory" class="org.vortikal.repositoryimpl.content.JTidyContentFactory" />
  <bean id="bufferedImageContentFactory" class="org.vortikal.repositoryimpl.content.BufferedImageContentFactory" />


  <bean id="authorizationManager" class="org.vortikal.repositoryimpl.AuthorizationManagerImpl">
    <property name="readOnly" value="${repositoryReadOnly}" />
    <property name="principalManager" ref="principalManager" />
    <property name="lockManager" ref="lockManager" />
    <property name="roleManager" ref="roleManager" />
    <property name="dao" ref="${repositoryBackend}" />
  </bean>

  <!-- Quartz scheduled jobs -->

  <bean id="repository.schedulerFactory"
        class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
    <property name="triggers">
      <list>
        <ref local="repository.unlockSimpleTrigger"/>
      </list>
    </property>
  </bean>


  <bean id="repository.unlockSimpleTrigger"
        class="org.springframework.scheduling.quartz.SimpleTriggerBean">
    <property name="jobDetail">
      <!-- see the example of method invoking job above -->    
      <ref bean="repository.cleanupLocksJobDetail"/>
    </property>
    <property name="startDelay">
      <!-- 60 seconds -->
      <value>60000</value>
    </property>
    <property name="repeatInterval">
      <!-- repeat every 600 seconds -->
      <value>600000</value>
    </property>
  </bean>

  <bean id="repository.cleanupLocksJobDetail" 
        class="org.vortikal.scheduling.quartz.VortikalMethodInvokingJobDetailFactoryBean">
    <property name="group" value="repository" />
    <property name="targetObject"><ref bean="repository.database"/></property>
    <property name="targetMethod"><value>deleteExpiredLocks</value></property>
  </bean>

  <bean id="repository.importer" class="org.vortikal.repositoryimpl.DataImportUtil">
    <property name="repository" ref="repository" />
  </bean>


  <bean id="repository.evaluator" class="org.vortikal.repositoryimpl.EvaluatorUtil">
    <property name="propertyManager" ref="propertyManager" />
    <property name="dataAccessor" ref="repository.database" />
  </bean>


</beans>
